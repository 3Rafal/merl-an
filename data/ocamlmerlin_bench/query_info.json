{"sample_id":59,"reply":{"class":"return","value":[{"start":{"line":99,"col":28},"end":{"line":99,"col":34}},{"start":{"line":101,"col":70},"end":{"line":101,"col":76}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"./bin/data.ml\", line 101, characters 70-76:"}
{"sample_id":56,"reply":{"class":"return","value":[{"start":{"line":83,"col":49},"end":{"line":83,"col":53},"type":"string","tail":"no"},{"start":{"line":83,"col":49},"end":{"line":83,"col":53},"type":"string","tail":"no"},{"start":{"line":80,"col":8},"end":{"line":83,"col":58},"type":"string","tail":"no"},{"start":{"line":79,"col":28},"end":{"line":83,"col":58},"type":"string -> string","tail":"no"},{"start":{"line":79,"col":23},"end":{"line":83,"col":58},"type":"string -> string -> string","tail":"no"},{"start":{"line":79,"col":14},"end":{"line":83,"col":58},"type":"Warnings.loc -> string -> string -> string","tail":"no"},{"start":{"line":79,"col":6},"end":{"line":85,"col":64},"type":"t","tail":"no"},{"start":{"line":66,"col":20},"end":{"line":120,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\n  val locate : t\n  val case_analysis : t\n  val type_enclosing : t\n  val occurrences : t\nend","tail":"no"},{"start":{"line":66,"col":0},"end":{"line":120,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\n  val locate : t\n  val case_analysis : t\n  val type_enclosing : t\n  val occurrences : t\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":20,"query":3,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"./bin/data.ml\", line 83, characters 49-53:"}
{"sample_id":53,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":18,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"./bin/data.ml\", line 79, characters 14-216:"}
{"sample_id":50,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.ml","pos":{"line":99,"col":28}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"./bin/data.ml\", line 101, characters 70-76:"}
{"sample_id":47,"reply":{"class":"return","value":[{"start":{"line":25,"col":28},"end":{"line":25,"col":33}},{"start":{"line":28,"col":22},"end":{"line":28,"col":27}}],"notifications":[],"timing":{"clock":14,"cpu":13,"query":0,"pp":0,"reader":0,"ppx":13,"typer":0,"error":0}},"loc":"File \"./bin/bin_tree.ml\", line 25, characters 28-33:"}
{"sample_id":44,"reply":{"class":"return","value":[{"start":{"line":19,"col":16},"end":{"line":19,"col":20},"type":"Data.t","tail":"no"},{"start":{"line":19,"col":16},"end":{"line":19,"col":20},"type":"Data.t","tail":"no"},{"start":{"line":19,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":14,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":13,"typer":0,"error":0}},"loc":"File \"./bin/bin_tree.ml\", line 19, characters 16-20:"}
{"sample_id":41,"reply":{"class":"return","value":[{"start":{"line":15,"col":47},"end":{"line":15,"col":48}},"(match 0 with | 0 -> _ | _ -> _)"],"notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":1,"ppx":14,"typer":0,"error":0}},"loc":"File \"./bin/bin_tree.ml\", line 15, characters 47-48:"}
{"sample_id":38,"reply":{"class":"return","value":"Already at definition point","notifications":[],"timing":{"clock":13,"cpu":13,"query":0,"pp":0,"reader":0,"ppx":13,"typer":0,"error":0}},"loc":"File \"./bin/bin_tree.ml\", line 25, characters 28-33:"}
{"sample_id":35,"reply":{"class":"return","value":[{"start":{"line":15,"col":11},"end":{"line":15,"col":20}},{"start":{"line":16,"col":63},"end":{"line":16,"col":72}}],"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"./bin/import.ml\", line 16, characters 63-72:"}
{"sample_id":32,"reply":{"class":"return","value":[{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":2,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"./bin/import.ml\", line 17, characters 11-13:"}
{"sample_id":29,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"./bin/import.ml\", line 16, characters 43-61:"}
{"sample_id":26,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":15,"col":11}},"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":4,"ppx":19,"typer":0,"error":0}},"loc":"File \"./bin/import.ml\", line 16, characters 63-72:"}
{"sample_id":23,"reply":{"class":"return","value":[{"start":{"line":71,"col":36},"end":{"line":71,"col":37}},{"start":{"line":72,"col":36},"end":{"line":72,"col":37}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"./bin/cursor_loc.ml\", line 72, characters 36-37:"}
{"sample_id":20,"reply":{"class":"return","value":[{"start":{"line":60,"col":27},"end":{"line":60,"col":32},"type":"bool","tail":"no"},{"start":{"line":60,"col":27},"end":{"line":60,"col":32},"type":"bool","tail":"no"},{"start":{"line":60,"col":13},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":54,"col":8},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":53,"col":10},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":28},"end":{"line":60,"col":33},"type":"Ppxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":28},"end":{"line":60,"col":33},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nPpxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":6},"end":{"line":60,"col":33},"type":"Ppxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":2,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"./bin/cursor_loc.ml\", line 52, characters 28-372:"}
{"sample_id":17,"reply":{"class":"return","value":[{"start":{"line":95,"col":53},"end":{"line":95,"col":58}},"(match false with | false -> _ | true -> _)"],"notifications":[],"timing":{"clock":45,"cpu":45,"query":26,"pp":0,"reader":1,"ppx":18,"typer":0,"error":0}},"loc":"File \"./bin/cursor_loc.ml\", line 95, characters 53-58:"}
{"sample_id":14,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":71,"col":36}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"./bin/cursor_loc.ml\", line 72, characters 36-37:"}
{"sample_id":11,"reply":{"class":"return","value":[{"start":{"line":17,"col":12},"end":{"line":17,"col":16}},{"start":{"line":19,"col":25},"end":{"line":19,"col":29}}],"notifications":[],"timing":{"clock":26,"cpu":26,"query":1,"pp":0,"reader":3,"ppx":22,"typer":0,"error":0}},"loc":"File \"./bin/main.ml\", line 19, characters 25-29:"}
{"sample_id":8,"reply":{"class":"return","value":[{"start":{"line":137,"col":18},"end":{"line":137,"col":28},"type":"float","tail":"no"},{"start":{"line":137,"col":18},"end":{"line":137,"col":28},"type":"float","tail":"no"},{"start":{"line":137,"col":12},"end":{"line":138,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":136,"col":12},"end":{"line":138,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":127,"col":12},"end":{"line":138,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":124,"col":12},"end":{"line":138,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":123,"col":12},"end":{"line":138,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":120,"col":8},"end":{"line":138,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":119,"col":64},"end":{"line":138,"col":34},"type":"(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":119,"col":54},"end":{"line":138,"col":34},"type":"int ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":119,"col":43},"end":{"line":138,"col":34},"type":"Data.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":119,"col":31},"end":{"line":138,"col":34},"type":"Data.Timing.t list ->\nData.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":119,"col":19},"end":{"line":138,"col":34},"type":"query_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":119,"col":6},"end":{"line":142,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":115,"col":6},"end":{"line":142,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":111,"col":6},"end":{"line":142,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":110,"col":6},"end":{"line":142,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":109,"col":6},"end":{"line":142,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":106,"col":2},"end":{"line":142,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":105,"col":2},"end":{"line":142,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":104,"col":2},"end":{"line":142,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":103,"col":15},"end":{"line":142,"col":30},"type":"Fpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":103,"col":4},"end":{"line":142,"col":30},"type":"Data.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":77},"end":{"line":142,"col":30},"type":"Data.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":69},"end":{"line":142,"col":30},"type":"merlin:label ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":57},"end":{"line":142,"col":30},"type":"query_time:float ->\nmerlin:label ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":45},"end":{"line":142,"col":30},"type":"query_type:Data.Query_type.t ->\nquery_time:float ->\nmerlin:label ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":32},"end":{"line":142,"col":30},"type":"sample_size:int ->\nquery_type:Data.Query_type.t ->\nquery_time:float ->\nmerlin:label ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":13},"end":{"line":142,"col":30},"type":"sample_id_counter:int ->\nsample_size:int ->\nquery_type:Data.Query_type.t ->\nquery_time:float ->\nmerlin:label ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":1,"pp":0,"reader":3,"ppx":16,"typer":0,"error":0}},"loc":"File \"./bin/main.ml\", line 137, characters 18-28:"}
{"sample_id":5,"reply":{"class":"return","value":[{"start":{"line":116,"col":8},"end":{"line":117,"col":65}},"(match init_merlin_cache ~query_time ~timing_data ~query_data\n        ~sample_id_counter ~query_type ~file ~merlin sample_set\nwith\n| Ok _ -> _\n| Error _ -> _)"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"./bin/main.ml\", line 116, characters 8-128:"}
{"sample_id":2,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":17,"col":12}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"./bin/main.ml\", line 19, characters 25-29:"}