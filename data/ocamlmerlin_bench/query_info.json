{"sample_id":595,"reply":{"class":"return","value":[{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":14,"col":16},"end":{"line":14,"col":22}},{"start":{"line":15,"col":22},"end":{"line":15,"col":28}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":69,"col":11},"end":{"line":69,"col":17}},{"start":{"line":70,"col":31},"end":{"line":70,"col":37}},{"start":{"line":70,"col":41},"end":{"line":70,"col":47}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 70, characters 41-47:"}
{"sample_id":594,"reply":{"class":"return","value":[{"start":{"line":37,"col":10},"end":{"line":37,"col":22}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 37, characters 10-22:"}
{"sample_id":593,"reply":{"class":"return","value":[{"start":{"line":36,"col":19},"end":{"line":36,"col":33}}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 36, characters 19-33:"}
{"sample_id":592,"reply":{"class":"return","value":[{"start":{"line":86,"col":12},"end":{"line":86,"col":15}},{"start":{"line":87,"col":19},"end":{"line":87,"col":22}}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 19-22:"}
{"sample_id":591,"reply":{"class":"return","value":[{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":14,"col":16},"end":{"line":14,"col":22}},{"start":{"line":15,"col":22},"end":{"line":15,"col":28}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":69,"col":11},"end":{"line":69,"col":17}},{"start":{"line":70,"col":31},"end":{"line":70,"col":37}},{"start":{"line":70,"col":41},"end":{"line":70,"col":47}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":1,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 69, characters 11-17:"}
{"sample_id":590,"reply":{"class":"return","value":[{"start":{"line":30,"col":54},"end":{"line":30,"col":65}}],"notifications":[],"timing":{"clock":26,"cpu":26,"query":1,"pp":0,"reader":4,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 54-65:"}
{"sample_id":589,"reply":{"class":"return","value":[{"start":{"line":40,"col":43},"end":{"line":40,"col":46}},{"start":{"line":46,"col":45},"end":{"line":46,"col":48}}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":4,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 40, characters 43-46:"}
{"sample_id":588,"reply":{"class":"return","value":[{"start":{"line":20,"col":12},"end":{"line":20,"col":15}},{"start":{"line":30,"col":19},"end":{"line":30,"col":22}}],"notifications":[],"timing":{"clock":26,"cpu":25,"query":4,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 19-22:"}
{"sample_id":587,"reply":{"class":"return","value":[{"start":{"line":30,"col":4},"end":{"line":30,"col":18}},{"start":{"line":49,"col":4},"end":{"line":49,"col":18}},{"start":{"line":76,"col":4},"end":{"line":76,"col":18}},{"start":{"line":87,"col":4},"end":{"line":87,"col":18}}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":3,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 4-18:"}
{"sample_id":586,"reply":{"class":"return","value":[{"start":{"line":46,"col":27},"end":{"line":46,"col":44}}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 27-44:"}
{"sample_id":585,"reply":{"class":"return","value":[{"start":{"line":12,"col":14},"end":{"line":12,"col":17}},{"start":{"line":13,"col":17},"end":{"line":13,"col":20}},{"start":{"line":16,"col":16},"end":{"line":16,"col":19}},{"start":{"line":35,"col":16},"end":{"line":35,"col":19}}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 16-19:"}
{"sample_id":584,"reply":{"class":"return","value":[{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":47,"col":8},"end":{"line":47,"col":9}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":21,"typer":1,"error":0}},"loc":"File \"\", line 45, characters 10-96:"}
{"sample_id":583,"reply":{"class":"return","value":[{"start":{"line":70,"col":10},"end":{"line":70,"col":27}}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 70, characters 10-27:"}
{"sample_id":582,"reply":{"class":"return","value":[{"start":{"line":12,"col":14},"end":{"line":12,"col":17}},{"start":{"line":13,"col":17},"end":{"line":13,"col":20}},{"start":{"line":16,"col":16},"end":{"line":16,"col":19}},{"start":{"line":35,"col":16},"end":{"line":35,"col":19}}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":1,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 13, characters 17-20:"}
{"sample_id":581,"reply":{"class":"return","value":[{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":12,"col":18},"end":{"line":12,"col":22}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":71,"col":33},"end":{"line":71,"col":37}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 71, characters 33-37:"}
{"sample_id":580,"reply":{"class":"return","value":[{"start":{"line":40,"col":12},"end":{"line":40,"col":15}},{"start":{"line":49,"col":19},"end":{"line":49,"col":22}}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":2,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 49, characters 19-22:"}
{"sample_id":579,"reply":{"class":"return","value":[],"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 73, characters 14-20:"}
{"sample_id":578,"reply":{"class":"return","value":[{"start":{"line":75,"col":13},"end":{"line":75,"col":16}},{"start":{"line":76,"col":19},"end":{"line":76,"col":22}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 19-22:"}
{"sample_id":577,"reply":{"class":"return","value":[{"start":{"line":30,"col":31},"end":{"line":30,"col":52}},{"start":{"line":76,"col":31},"end":{"line":76,"col":52}},{"start":{"line":87,"col":31},"end":{"line":87,"col":52}}],"notifications":[],"timing":{"clock":28,"cpu":28,"query":1,"pp":0,"reader":4,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 31-52:"}
{"sample_id":576,"reply":{"class":"return","value":[{"start":{"line":7,"col":35},"end":{"line":7,"col":58}}],"notifications":[],"timing":{"clock":27,"cpu":27,"query":5,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 35-58:"}
{"sample_id":575,"reply":{"class":"return","value":[{"start":{"line":7,"col":6},"end":{"line":7,"col":26}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 6-26:"}
{"sample_id":574,"reply":{"class":"return","value":[{"start":{"line":71,"col":12},"end":{"line":71,"col":32}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 71, characters 12-32:"}
{"sample_id":573,"reply":{"class":"return","value":[{"start":{"line":40,"col":29},"end":{"line":40,"col":41}},{"start":{"line":45,"col":20},"end":{"line":45,"col":32}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 45, characters 20-32:"}
{"sample_id":572,"reply":{"class":"return","value":[{"start":{"line":4,"col":18},"end":{"line":4,"col":20}},{"start":{"line":5,"col":9},"end":{"line":5,"col":11}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 9-11:"}
{"sample_id":571,"reply":{"class":"return","value":[{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":47,"col":8},"end":{"line":47,"col":9}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 47, characters 8-9:"}
{"sample_id":570,"reply":{"class":"return","value":[{"start":{"line":4,"col":24},"end":{"line":4,"col":39}}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 4, characters 24-39:"}
{"sample_id":569,"reply":{"class":"return","value":[{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":11,"col":2},"end":{"line":18,"col":21}},{"start":{"line":47,"col":8},"end":{"line":47,"col":9}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":68,"col":2},"end":{"line":73,"col":21}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}},{"start":{"line":84,"col":2},"end":{"line":84,"col":73}}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":0,"pp":0,"reader":0,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 10-61:"}
{"sample_id":568,"reply":{"class":"return","value":[{"start":{"line":3,"col":2},"end":{"line":3,"col":13}}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 3, characters 2-13:"}
{"sample_id":567,"reply":{"class":"return","value":[{"start":{"line":84,"col":26},"end":{"line":84,"col":31}},{"start":{"line":84,"col":46},"end":{"line":84,"col":51}}],"notifications":[],"timing":{"clock":33,"cpu":33,"query":1,"pp":0,"reader":7,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 84, characters 26-31:"}
{"sample_id":564,"reply":{"class":"return","value":[{"start":{"line":76,"col":53},"end":{"line":76,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":76,"col":30},"end":{"line":76,"col":72},"type":"string","tail":"no"},{"start":{"line":76,"col":4},"end":{"line":76,"col":72},"type":"unit","tail":"no"},{"start":{"line":75,"col":17},"end":{"line":76,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":75,"col":13},"end":{"line":76,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":66,"col":20},"end":{"line":77,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":66,"col":0},"end":{"line":77,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":30,"cpu":30,"query":1,"pp":0,"reader":0,"ppx":28,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 17-96:"}
{"sample_id":563,"reply":{"class":"return","value":[{"start":{"line":87,"col":54},"end":{"line":87,"col":65},"type":"t -> Yojson.Safe.t","tail":"no"},{"start":{"line":87,"col":54},"end":{"line":87,"col":65},"type":"t -> Yojson.Safe.t","tail":"no"},{"start":{"line":87,"col":53},"end":{"line":87,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":87,"col":30},"end":{"line":87,"col":72},"type":"string","tail":"no"},{"start":{"line":87,"col":4},"end":{"line":87,"col":72},"type":"unit","tail":"no"},{"start":{"line":86,"col":16},"end":{"line":87,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":86,"col":12},"end":{"line":87,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":79,"col":18},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":79,"col":0},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":1,"pp":0,"reader":0,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 54-65:"}
{"sample_id":562,"reply":{"class":"return","value":[{"start":{"line":30,"col":53},"end":{"line":30,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":30,"col":30},"end":{"line":30,"col":72},"type":"string","tail":"no"},{"start":{"line":30,"col":4},"end":{"line":30,"col":72},"type":"unit","tail":"no"},{"start":{"line":20,"col":16},"end":{"line":30,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":20,"col":12},"end":{"line":30,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":10,"col":16},"end":{"line":31,"col":3},"type":"sig\n  type t = {\n    timings : int list;\n    max_timing : int;\n    file_name : string;\n    query_type_name : string;\n    sample_id : int;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":31,"col":3},"type":"sig\n  type t = {\n    timings : int list;\n    max_timing : int;\n    file_name : string;\n    query_type_name : string;\n    sample_id : int;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":1,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 4-72:"}
{"sample_id":561,"reply":{"class":"return","value":[{"start":{"line":87,"col":53},"end":{"line":87,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":87,"col":30},"end":{"line":87,"col":72},"type":"string","tail":"no"},{"start":{"line":87,"col":4},"end":{"line":87,"col":72},"type":"unit","tail":"no"},{"start":{"line":86,"col":16},"end":{"line":87,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":86,"col":12},"end":{"line":87,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":79,"col":18},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":79,"col":0},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 4-72:"}
{"sample_id":560,"reply":{"class":"return","value":[{"start":{"line":44,"col":29},"end":{"line":44,"col":38},"type":"int","tail":"no"},{"start":{"line":44,"col":29},"end":{"line":44,"col":38},"type":"int","tail":"no"},{"start":{"line":44,"col":24},"end":{"line":44,"col":38},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":44,"col":10},"end":{"line":44,"col":39},"type":"string * Yojson.Basic.t","tail":"no"},{"start":{"line":43,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":42,"col":6},"end":{"line":47,"col":9},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":1,"pp":0,"reader":0,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 44, characters 24-38:"}
{"sample_id":559,"reply":{"class":"return","value":[{"start":{"line":10,"col":16},"end":{"line":31,"col":3},"type":"sig\n  type t = {\n    timings : int list;\n    max_timing : int;\n    file_name : string;\n    query_type_name : string;\n    sample_id : int;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":31,"col":3},"type":"sig\n  type t = {\n    timings : int list;\n    max_timing : int;\n    file_name : string;\n    query_type_name : string;\n    sample_id : int;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":1,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 18, characters 14-20:"}
{"sample_id":558,"reply":{"class":"return","value":[{"start":{"line":30,"col":53},"end":{"line":30,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":30,"col":30},"end":{"line":30,"col":72},"type":"string","tail":"no"},{"start":{"line":30,"col":4},"end":{"line":30,"col":72},"type":"unit","tail":"no"},{"start":{"line":20,"col":16},"end":{"line":30,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":20,"col":12},"end":{"line":30,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":10,"col":16},"end":{"line":31,"col":3},"type":"sig\n  type t = {\n    timings : int list;\n    max_timing : int;\n    file_name : string;\n    query_type_name : string;\n    sample_id : int;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":31,"col":3},"type":"sig\n  type t = {\n    timings : int list;\n    max_timing : int;\n    file_name : string;\n    query_type_name : string;\n    sample_id : int;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":27,"cpu":26,"query":0,"pp":0,"reader":0,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 30-72:"}
{"sample_id":557,"reply":{"class":"return","value":[{"start":{"line":76,"col":66},"end":{"line":76,"col":70},"type":"t","tail":"no"},{"start":{"line":76,"col":66},"end":{"line":76,"col":70},"type":"t","tail":"no"},{"start":{"line":76,"col":53},"end":{"line":76,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":76,"col":30},"end":{"line":76,"col":72},"type":"string","tail":"no"},{"start":{"line":76,"col":4},"end":{"line":76,"col":72},"type":"unit","tail":"no"},{"start":{"line":75,"col":17},"end":{"line":76,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":75,"col":13},"end":{"line":76,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":66,"col":20},"end":{"line":77,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":66,"col":0},"end":{"line":77,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":24,"query":1,"pp":0,"reader":2,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 53-71:"}
{"sample_id":556,"reply":{"class":"return","value":[{"start":{"line":47,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":46,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":43,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":42,"col":6},"end":{"line":47,"col":9},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 47, characters 8-9:"}
{"sample_id":555,"reply":{"class":"return","value":[{"start":{"line":49,"col":54},"end":{"line":49,"col":63},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":49,"col":54},"end":{"line":49,"col":63},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":49,"col":30},"end":{"line":49,"col":64},"type":"string","tail":"no"},{"start":{"line":49,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 49, characters 30-64:"}
{"sample_id":554,"reply":{"class":"return","value":[{"start":{"line":76,"col":4},"end":{"line":76,"col":18},"type":"Format.formatter -> ('a, Format.formatter, unit) format -> 'a","tail":"no"},{"start":{"line":76,"col":4},"end":{"line":76,"col":18},"type":"Format.formatter ->\n(string -> unit, Format.formatter, unit) format -> string -> unit","tail":"no"},{"start":{"line":76,"col":4},"end":{"line":76,"col":72},"type":"unit","tail":"no"},{"start":{"line":75,"col":17},"end":{"line":76,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":75,"col":13},"end":{"line":76,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":66,"col":20},"end":{"line":77,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":66,"col":0},"end":{"line":77,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":29,"cpu":29,"query":7,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 4-18:"}
{"sample_id":553,"reply":{"class":"return","value":[{"start":{"line":76,"col":53},"end":{"line":76,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":76,"col":30},"end":{"line":76,"col":72},"type":"string","tail":"no"},{"start":{"line":76,"col":4},"end":{"line":76,"col":72},"type":"unit","tail":"no"},{"start":{"line":75,"col":17},"end":{"line":76,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":75,"col":13},"end":{"line":76,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":66,"col":20},"end":{"line":77,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":66,"col":0},"end":{"line":77,"col":3},"type":"sig\n  type t = {\n    name : string;\n    cmd : Warnings.loc -> string -> string;\n    nodes : Cursor_loc.corr_node list;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val _print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 13-96:"}
{"sample_id":552,"reply":{"class":"return","value":[{"start":{"line":44,"col":29},"end":{"line":44,"col":38},"type":"int","tail":"no"},{"start":{"line":44,"col":29},"end":{"line":44,"col":38},"type":"int","tail":"no"},{"start":{"line":44,"col":24},"end":{"line":44,"col":38},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":44,"col":10},"end":{"line":44,"col":39},"type":"string * Yojson.Basic.t","tail":"no"},{"start":{"line":43,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":42,"col":6},"end":{"line":47,"col":9},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":26,"cpu":26,"query":1,"pp":0,"reader":1,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 44, characters 29-38:"}
{"sample_id":551,"reply":{"class":"return","value":[{"start":{"line":79,"col":18},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":79,"col":0},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 84, characters 66-72:"}
{"sample_id":550,"reply":{"class":"return","value":[{"start":{"line":45,"col":20},"end":{"line":45,"col":32},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":45,"col":20},"end":{"line":45,"col":32},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":45,"col":33},"type":"string * Yojson.Basic.t","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":43,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":42,"col":6},"end":{"line":47,"col":9},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":1,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 45, characters 10-33:"}
{"sample_id":549,"reply":{"class":"return","value":[{"start":{"line":49,"col":31},"end":{"line":49,"col":53},"type":"?buf:Buffer.t ->\n?len:int -> ?suf:string -> ?std:bool -> Yojson.Basic.t -> string","tail":"no"},{"start":{"line":49,"col":31},"end":{"line":49,"col":53},"type":"?buf:Buffer.t ->\n?len:int -> ?suf:string -> ?std:bool -> Yojson.Basic.t -> string","tail":"no"},{"start":{"line":49,"col":30},"end":{"line":49,"col":64},"type":"string","tail":"no"},{"start":{"line":49,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 49, characters 31-53:"}
{"sample_id":548,"reply":{"class":"return","value":[{"start":{"line":45,"col":20},"end":{"line":45,"col":32},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":45,"col":20},"end":{"line":45,"col":32},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":45,"col":33},"type":"string * Yojson.Basic.t","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":43,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":42,"col":6},"end":{"line":47,"col":9},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":2,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 45, characters 20-32:"}
{"sample_id":547,"reply":{"class":"return","value":[{"start":{"line":87,"col":66},"end":{"line":87,"col":70},"type":"t","tail":"no"},{"start":{"line":87,"col":66},"end":{"line":87,"col":70},"type":"t","tail":"no"},{"start":{"line":87,"col":53},"end":{"line":87,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":87,"col":30},"end":{"line":87,"col":72},"type":"string","tail":"no"},{"start":{"line":87,"col":4},"end":{"line":87,"col":72},"type":"unit","tail":"no"},{"start":{"line":86,"col":16},"end":{"line":87,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":86,"col":12},"end":{"line":87,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":79,"col":18},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":79,"col":0},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 66-70:"}
{"sample_id":546,"reply":{"class":"return","value":[{"start":{"line":87,"col":4},"end":{"line":87,"col":18},"type":"Format.formatter -> ('a, Format.formatter, unit) format -> 'a","tail":"no"},{"start":{"line":87,"col":4},"end":{"line":87,"col":18},"type":"Format.formatter ->\n(string -> unit, Format.formatter, unit) format -> string -> unit","tail":"no"},{"start":{"line":87,"col":4},"end":{"line":87,"col":72},"type":"unit","tail":"no"},{"start":{"line":86,"col":16},"end":{"line":87,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":86,"col":12},"end":{"line":87,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":79,"col":18},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":79,"col":0},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":1,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 4-18:"}
{"sample_id":545,"reply":{"class":"return","value":[{"start":{"line":87,"col":53},"end":{"line":87,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":87,"col":30},"end":{"line":87,"col":72},"type":"string","tail":"no"},{"start":{"line":87,"col":4},"end":{"line":87,"col":72},"type":"unit","tail":"no"},{"start":{"line":86,"col":16},"end":{"line":87,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":86,"col":12},"end":{"line":87,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":79,"col":18},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":79,"col":0},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":30,"cpu":30,"query":8,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 30-72:"}
{"sample_id":544,"reply":{"class":"return","value":[{"start":{"line":4,"col":40},"end":{"line":4,"col":42},"type":"out_channel","tail":"no"},{"start":{"line":4,"col":40},"end":{"line":4,"col":42},"type":"out_channel","tail":"no"},{"start":{"line":4,"col":24},"end":{"line":4,"col":42},"type":"unit","tail":"no"},{"start":{"line":4,"col":13},"end":{"line":4,"col":43},"type":"unit -> unit","tail":"no"},{"start":{"line":3,"col":2},"end":{"line":8,"col":7},"type":"unit","tail":"no"},{"start":{"line":2,"col":2},"end":{"line":8,"col":7},"type":"unit","tail":"no"},{"start":{"line":1,"col":30},"end":{"line":8,"col":7},"type":"'a list -> unit","tail":"no"},{"start":{"line":1,"col":20},"end":{"line":8,"col":7},"type":"filename:string -> 'a list -> unit","tail":"no"},{"start":{"line":1,"col":9},"end":{"line":8,"col":7},"type":"formatter:(Format.formatter -> 'a -> unit) ->\nfilename:string -> 'a list -> unit","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 4, characters 13-43:"}
{"sample_id":543,"reply":{"class":"return","value":[{"start":{"line":45,"col":11},"end":{"line":45,"col":18},"type":"string","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":45,"col":33},"type":"string * Yojson.Basic.t","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":43,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":42,"col":6},"end":{"line":47,"col":9},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":24,"query":1,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 45, characters 11-18:"}
{"sample_id":542,"reply":{"class":"return","value":[{"start":{"line":30,"col":66},"end":{"line":30,"col":70},"type":"t","tail":"no"},{"start":{"line":30,"col":66},"end":{"line":30,"col":70},"type":"t","tail":"no"},{"start":{"line":30,"col":53},"end":{"line":30,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":30,"col":30},"end":{"line":30,"col":72},"type":"string","tail":"no"},{"start":{"line":30,"col":4},"end":{"line":30,"col":72},"type":"unit","tail":"no"},{"start":{"line":20,"col":16},"end":{"line":30,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":20,"col":12},"end":{"line":30,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":10,"col":16},"end":{"line":31,"col":3},"type":"sig\n  type t = {\n    timings : int list;\n    max_timing : int;\n    file_name : string;\n    query_type_name : string;\n    sample_id : int;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":31,"col":3},"type":"sig\n  type t = {\n    timings : int list;\n    max_timing : int;\n    file_name : string;\n    query_type_name : string;\n    sample_id : int;\n  }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":28,"cpu":28,"query":0,"pp":0,"reader":5,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 66-70:"}
{"sample_id":541,"reply":{"class":"return","value":[{"start":{"line":2,"col":20},"end":{"line":2,"col":28},"type":"string","tail":"no"},{"start":{"line":2,"col":20},"end":{"line":2,"col":28},"type":"string","tail":"no"},{"start":{"line":2,"col":11},"end":{"line":2,"col":28},"type":"out_channel","tail":"no"},{"start":{"line":2,"col":2},"end":{"line":8,"col":7},"type":"unit","tail":"no"},{"start":{"line":1,"col":30},"end":{"line":8,"col":7},"type":"'a list -> unit","tail":"no"},{"start":{"line":1,"col":20},"end":{"line":8,"col":7},"type":"filename:string -> 'a list -> unit","tail":"no"},{"start":{"line":1,"col":9},"end":{"line":8,"col":7},"type":"formatter:(Format.formatter -> 'a -> unit) ->\nfilename:string -> 'a list -> unit","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":1,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 20-28:"}
{"sample_id":540,"reply":{"class":"return","value":[{"start":{"line":47,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":46,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":43,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":42,"col":6},"end":{"line":47,"col":9},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 42, characters 6-160:"}
{"sample_id":539,"reply":{"class":"return","value":[{"start":{"line":87,"col":66},"end":{"line":87,"col":70},"type":"t","tail":"no"},{"start":{"line":87,"col":66},"end":{"line":87,"col":70},"type":"t","tail":"no"},{"start":{"line":87,"col":53},"end":{"line":87,"col":71},"type":"Yojson.Safe.t","tail":"no"},{"start":{"line":87,"col":30},"end":{"line":87,"col":72},"type":"string","tail":"no"},{"start":{"line":87,"col":4},"end":{"line":87,"col":72},"type":"unit","tail":"no"},{"start":{"line":86,"col":16},"end":{"line":87,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":86,"col":12},"end":{"line":87,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":79,"col":18},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":79,"col":0},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 53-71:"}
{"sample_id":538,"reply":{"class":"return","value":[{"start":{"line":49,"col":54},"end":{"line":49,"col":63},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":49,"col":54},"end":{"line":49,"col":63},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":49,"col":30},"end":{"line":49,"col":64},"type":"string","tail":"no"},{"start":{"line":49,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":1,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 40, characters 12-303:"}
{"sample_id":537,"reply":{"class":"return","value":[{"start":{"line":87,"col":31},"end":{"line":87,"col":52},"type":"?buf:Buffer.t ->\n?len:int -> ?suf:string -> ?std:bool -> Yojson.Safe.t -> string","tail":"no"},{"start":{"line":87,"col":31},"end":{"line":87,"col":52},"type":"?buf:Buffer.t ->\n?len:int -> ?suf:string -> ?std:bool -> Yojson.Safe.t -> string","tail":"no"},{"start":{"line":87,"col":30},"end":{"line":87,"col":72},"type":"string","tail":"no"},{"start":{"line":87,"col":4},"end":{"line":87,"col":72},"type":"unit","tail":"no"},{"start":{"line":86,"col":16},"end":{"line":87,"col":72},"type":"t -> unit","tail":"no"},{"start":{"line":86,"col":12},"end":{"line":87,"col":72},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":79,"col":18},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":79,"col":0},"end":{"line":88,"col":3},"type":"sig\n  type t = { total_time : float; query_time : float; }\n  val t_of_yojson : Yojson.Safe.t -> t\n  val yojson_of_t : t -> Yojson.Safe.t\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 31-52:"}
{"sample_id":536,"reply":{"class":"return","value":[{"start":{"line":46,"col":45},"end":{"line":46,"col":48},"type":"Warnings.loc","tail":"no"},{"start":{"line":46,"col":45},"end":{"line":46,"col":48},"type":"Warnings.loc","tail":"no"},{"start":{"line":46,"col":26},"end":{"line":46,"col":49},"type":"string","tail":"no"},{"start":{"line":46,"col":18},"end":{"line":46,"col":49},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":46,"col":10},"end":{"line":46,"col":50},"type":"string * Yojson.Basic.t","tail":"no"},{"start":{"line":46,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":45,"col":10},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":43,"col":8},"end":{"line":47,"col":9},"type":"(string * Yojson.Basic.t) list","tail":"no"},{"start":{"line":42,"col":6},"end":{"line":47,"col":9},"type":"[> `Assoc of (string * Yojson.Basic.t) list ]","tail":"no"},{"start":{"line":41,"col":4},"end":{"line":49,"col":64},"type":"unit","tail":"no"},{"start":{"line":40,"col":16},"end":{"line":49,"col":64},"type":"t -> unit","tail":"no"},{"start":{"line":40,"col":12},"end":{"line":49,"col":64},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":33,"col":20},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"},{"start":{"line":33,"col":0},"end":{"line":50,"col":3},"type":"sig\n  type t = {\n    sample_id : int;\n    merlin_reply : Yojson.Basic.t;\n    loc : Warnings.loc;\n  }\n  val print : Format.formatter -> t -> unit\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 26-49:"}
{"sample_id":533,"reply":{"class":"return","value":[{"start":{"line":49,"col":4},"end":{"line":49,"col":64}},"match Format.fprintf ppf\n        (CamlinternalFormatBasics.Format\n           ((CamlinternalFormatBasics.String\n               (CamlinternalFormatBasics.No_padding,\n                 (CamlinternalFormatBasics.Flush\n                    CamlinternalFormatBasics.End_of_format))), \"%s%!\"))\n        (Yojson.Basic.to_string ?buf:None ?len:None ?suf:None ?std:None\n           full_json)\nwith\n| () -> _"],"notifications":[],"timing":{"clock":35,"cpu":34,"query":0,"pp":0,"reader":9,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 49, characters 4-64:"}
{"sample_id":532,"reply":{"class":"return","value":[{"start":{"line":76,"col":66},"end":{"line":76,"col":70}},"(match data with | { name; cmd; nodes } -> _)"],"notifications":[],"timing":{"clock":23,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 66-70:"}
{"sample_id":531,"reply":{"class":"error","value":"Destruct not allowed on structure_item","notifications":[],"timing":{"clock":24,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 18, characters 14-20:"}
{"sample_id":530,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":31,"cpu":31,"query":0,"pp":0,"reader":8,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 4-18:"}
{"sample_id":529,"reply":{"class":"return","value":[{"start":{"line":40,"col":16},"end":{"line":40,"col":48}},"{ sample_id = 0; merlin_reply; loc } | { sample_id = _; merlin_reply; loc }"],"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 40, characters 18-27:"}
{"sample_id":528,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 59-68:"}
{"sample_id":527,"reply":{"class":"return","value":[{"start":{"line":20,"col":16},"end":{"line":20,"col":20}},"{ timings; max_timing; file_name; query_type_name; sample_id }"],"notifications":[],"timing":{"clock":25,"cpu":24,"query":0,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 20, characters 16-20:"}
{"sample_id":526,"reply":{"class":"error","value":"Destruct not allowed on structure_item","notifications":[],"timing":{"clock":25,"cpu":25,"query":0,"pp":0,"reader":0,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 73, characters 14-20:"}
{"sample_id":525,"reply":{"class":"return","value":[{"start":{"line":86,"col":16},"end":{"line":86,"col":20}},"{ total_time; query_time }"],"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 86, characters 16-20:"}
{"sample_id":524,"reply":{"class":"return","value":[{"start":{"line":46,"col":18},"end":{"line":46,"col":49}},"(match `String (Cursor_loc.pprint loc) with\n| `Bool _ -> _\n| `Null -> _\n| `Assoc _ -> _\n| `List _ -> _\n| `Float _ -> _\n| `String _ -> _\n| `Int _ -> _)"],"notifications":[],"timing":{"clock":27,"cpu":27,"query":0,"pp":0,"reader":3,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 18-49:"}
{"sample_id":523,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: formatter","notifications":[],"timing":{"clock":23,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 49, characters 19-22:"}
{"sample_id":522,"reply":{"class":"return","value":[{"start":{"line":47,"col":8},"end":{"line":47,"col":9}},"(match [] with | [] -> _ | _::_ -> _)"],"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 47, characters 8-9:"}
{"sample_id":521,"reply":{"class":"return","value":[{"start":{"line":87,"col":30},"end":{"line":87,"col":72}},"(match Yojson.Safe.to_string ?buf:None ?len:None ?suf:None ?std:None\n        (yojson_of_t data)\nwith\n| \"\" -> _\n| _ -> _)"],"notifications":[],"timing":{"clock":35,"cpu":34,"query":0,"pp":0,"reader":10,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 30-72:"}
{"sample_id":520,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 17-96:"}
{"sample_id":519,"reply":{"class":"return","value":[{"start":{"line":42,"col":6},"end":{"line":47,"col":9}},"match `Assoc\n        [(\"sample_id\", (`Int sample_id));\n        (\"reply\", merlin_reply);\n        (\"loc\", (`String (Cursor_loc.pprint loc)))]\nwith\n| `Assoc _ -> _"],"notifications":[],"timing":{"clock":25,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 42, characters 6-160:"}
{"sample_id":518,"reply":{"class":"return","value":[{"start":{"line":87,"col":4},"end":{"line":87,"col":72}},"match Format.fprintf ppf\n        (CamlinternalFormatBasics.Format\n           ((CamlinternalFormatBasics.String\n               (CamlinternalFormatBasics.No_padding,\n                 (CamlinternalFormatBasics.Flush\n                    CamlinternalFormatBasics.End_of_format))), \"%s%!\"))\n        (Yojson.Safe.to_string ?buf:None ?len:None ?suf:None ?std:None\n           (yojson_of_t data))\nwith\n| () -> _"],"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 4-72:"}
{"sample_id":517,"reply":{"class":"return","value":[{"start":{"line":43,"col":8},"end":{"line":47,"col":9}},"(match [(\"sample_id\", (`Int sample_id));\n      (\"reply\", merlin_reply);\n      (\"loc\", (`String (Cursor_loc.pprint loc)))]\nwith\n| [] -> _\n| _::_ -> _)"],"notifications":[],"timing":{"clock":24,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":21,"typer":2,"error":0}},"loc":"File \"\", line 44, characters 10-137:"}
{"sample_id":516,"reply":{"class":"error","value":"Destruct not allowed on structure_item","notifications":[],"timing":{"clock":23,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 84, characters 66-72:"}
{"sample_id":515,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: formatter","notifications":[],"timing":{"clock":23,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 19-22:"}
{"sample_id":514,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":25,"cpu":24,"query":0,"pp":0,"reader":2,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 31-52:"}
{"sample_id":513,"reply":{"class":"return","value":[{"start":{"line":2,"col":20},"end":{"line":2,"col":28}},"(match filename with | \"\" -> _ | _ -> _)"],"notifications":[],"timing":{"clock":24,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 20-28:"}
{"sample_id":512,"reply":{"class":"return","value":[{"start":{"line":87,"col":53},"end":{"line":87,"col":71}},"(match yojson_of_t data with\n| `Tuple _ -> _\n| `Bool _ -> _\n| `Intlit _ -> _\n| `Null -> _\n| `Variant _ -> _\n| `Assoc _ -> _\n| `List _ -> _\n| `Float _ -> _\n| `String _ -> _\n| `Int _ -> _)"],"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 53-71:"}
{"sample_id":511,"reply":{"class":"return","value":[{"start":{"line":30,"col":23},"end":{"line":30,"col":29}},"(match \"%s%!\" with | \"\" -> _ | _ -> _)"],"notifications":[],"timing":{"clock":24,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 23-29:"}
{"sample_id":510,"reply":{"class":"return","value":[{"start":{"line":2,"col":2},"end":{"line":8,"col":7}},"match let oc = open_out filename in\n      Fun.protect ~finally:(fun () -> close_out_noerr oc)\n        (fun () ->\n           let ppf = Format.formatter_of_out_channel oc in\n           Format.pp_print_list ?pp_sep:(Some Format.pp_print_newline)\n             formatter ppf data)\nwith\n| () -> _"],"notifications":[],"timing":{"clock":34,"cpu":34,"query":0,"pp":0,"reader":10,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 2-244:"}
{"sample_id":509,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":23,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 54-65:"}
{"sample_id":508,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 54-65:"}
{"sample_id":507,"reply":{"class":"return","value":[{"start":{"line":30,"col":30},"end":{"line":30,"col":72}},"(match Yojson.Safe.to_string ?buf:None ?len:None ?suf:None ?std:None\n        (yojson_of_t data)\nwith\n| \"\" -> _\n| _ -> _)"],"notifications":[],"timing":{"clock":33,"cpu":33,"query":0,"pp":0,"reader":8,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 30-72:"}
{"sample_id":506,"reply":{"class":"return","value":[{"start":{"line":76,"col":53},"end":{"line":76,"col":71}},"(match yojson_of_t data with\n| `Tuple _ -> _\n| `Bool _ -> _\n| `Intlit _ -> _\n| `Null -> _\n| `Variant _ -> _\n| `Assoc _ -> _\n| `List _ -> _\n| `Float _ -> _\n| `String _ -> _\n| `Int _ -> _)"],"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":1,"ppx":22,"typer":1,"error":0}},"loc":"File \"\", line 76, characters 53-71:"}
{"sample_id":505,"reply":{"class":"return","value":[{"start":{"line":45,"col":10},"end":{"line":47,"col":9}},"(match [(\"reply\", merlin_reply); (\"loc\", (`String (Cursor_loc.pprint loc)))]\nwith\n| [] -> _\n| _::_ -> _)"],"notifications":[],"timing":{"clock":25,"cpu":25,"query":2,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 45, characters 10-96:"}
{"sample_id":502,"reply":{"class":"return","value":"\"string\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[],"timing":{"clock":25,"cpu":25,"query":0,"pp":0,"reader":0,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 70, characters 41-47:"}
{"sample_id":501,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":3,"col":0}},"notifications":[],"timing":{"clock":25,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 37, characters 10-22:"}
{"sample_id":500,"reply":{"class":"return","value":"'Yojson.Basic.t' seems to originate from 'Type' whose ML file could not be found","notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":0,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 36, characters 19-33:"}
{"sample_id":499,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.ml","pos":{"line":86,"col":12}},"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 19-22:"}
{"sample_id":498,"reply":{"class":"return","value":"\"string\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[],"timing":{"clock":31,"cpu":31,"query":9,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 69, characters 11-17:"}
{"sample_id":497,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.ml","pos":{"line":11,"col":2}},"notifications":[],"timing":{"clock":32,"cpu":31,"query":0,"pp":0,"reader":9,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 54-65:"}
{"sample_id":496,"reply":{"class":"return","value":"Already at definition point","notifications":[],"timing":{"clock":34,"cpu":34,"query":0,"pp":0,"reader":11,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 40, characters 43-46:"}
{"sample_id":495,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.ml","pos":{"line":20,"col":12}},"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 19-22:"}
{"sample_id":494,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/format.ml","pos":{"line":1428,"col":4}},"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 87, characters 4-18:"}
{"sample_id":493,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":21,"col":4}},"notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":2,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 27-44:"}
{"sample_id":492,"reply":{"class":"return","value":"\"int\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 16-19:"}
{"sample_id":491,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 45, characters 10-96:"}
{"sample_id":490,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/location.ml","pos":{"line":4,"col":0}},"notifications":[],"timing":{"clock":23,"cpu":23,"query":1,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 70, characters 10-27:"}
{"sample_id":489,"reply":{"class":"return","value":"\"int\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":2,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 13, characters 17-20:"}
{"sample_id":488,"reply":{"class":"return","value":"\"list\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[],"timing":{"clock":29,"cpu":28,"query":0,"pp":0,"reader":6,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 71, characters 33-37:"}
{"sample_id":487,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.ml","pos":{"line":40,"col":12}},"notifications":[],"timing":{"clock":25,"cpu":25,"query":0,"pp":0,"reader":0,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 49, characters 19-22:"}
{"sample_id":486,"reply":{"class":"error","value":"Wrong file naming: /home/sonja/.opam/5.0.0~alpha0/lib/yojson/yojson.cmi\ncontains the compiled interface for\nYojson when yojson was expected","notifications":[],"timing":{"clock":33,"cpu":33,"query":0,"pp":0,"reader":10,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 73, characters 14-20:"}
{"sample_id":485,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.ml","pos":{"line":75,"col":13}},"notifications":[],"timing":{"clock":31,"cpu":31,"query":0,"pp":0,"reader":7,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 76, characters 19-22:"}
{"sample_id":484,"reply":{"class":"return","value":"'Yojson.Safe.to_string' seems to originate from 'Write' whose ML file could not be found","notifications":[],"timing":{"clock":40,"cpu":40,"query":16,"pp":0,"reader":0,"ppx":22,"typer":1,"error":0}},"loc":"File \"\", line 87, characters 31-52:"}
{"sample_id":483,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/format.ml","pos":{"line":670,"col":4}},"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 35-58:"}
{"sample_id":482,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/format.ml","pos":{"line":1252,"col":8}},"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 6-26:"}
{"sample_id":481,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":5,"col":0}},"notifications":[],"timing":{"clock":25,"cpu":24,"query":0,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 71, characters 12-32:"}
{"sample_id":480,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.ml","pos":{"line":40,"col":29}},"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":1,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 45, characters 20-32:"}
{"sample_id":479,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 9-11:"}
{"sample_id":478,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 47, characters 8-9:"}
{"sample_id":477,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":391,"col":4}},"notifications":[],"timing":{"clock":33,"cpu":33,"query":0,"pp":0,"reader":10,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 4, characters 24-39:"}
{"sample_id":476,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 10-61:"}
{"sample_id":475,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/fun.ml","pos":{"line":27,"col":4}},"notifications":[],"timing":{"clock":27,"cpu":27,"query":1,"pp":0,"reader":0,"ppx":26,"typer":0,"error":0}},"loc":"File \"\", line 3, characters 2-13:"}
{"sample_id":474,"reply":{"class":"return","value":"\"float\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":0,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 84, characters 26-31:"}
{"sample_id":471,"reply":{"class":"return","value":[{"start":{"line":15,"col":45},"end":{"line":15,"col":46}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 45-46:"}
{"sample_id":470,"reply":{"class":"return","value":[{"start":{"line":25,"col":16},"end":{"line":25,"col":20}},{"start":{"line":27,"col":12},"end":{"line":27,"col":16}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 25, characters 16-20:"}
{"sample_id":469,"reply":{"class":"return","value":[{"start":{"line":24,"col":16},"end":{"line":24,"col":18}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 24, characters 16-18:"}
{"sample_id":468,"reply":{"class":"return","value":[{"start":{"line":10,"col":12},"end":{"line":10,"col":23}},{"start":{"line":17,"col":10},"end":{"line":17,"col":21}},{"start":{"line":19,"col":4},"end":{"line":19,"col":15}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 10-21:"}
{"sample_id":467,"reply":{"class":"return","value":[{"start":{"line":13,"col":32},"end":{"line":13,"col":36}},{"start":{"line":15,"col":65},"end":{"line":15,"col":69}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 65-69:"}
{"sample_id":466,"reply":{"class":"return","value":[{"start":{"line":10,"col":24},"end":{"line":10,"col":32}},{"start":{"line":12,"col":38},"end":{"line":12,"col":46}},{"start":{"line":15,"col":28},"end":{"line":15,"col":36}},{"start":{"line":17,"col":22},"end":{"line":17,"col":30}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":1,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 12, characters 38-46:"}
{"sample_id":465,"reply":{"class":"return","value":[{"start":{"line":3,"col":16},"end":{"line":3,"col":20}},{"start":{"line":6,"col":49},"end":{"line":6,"col":53}},{"start":{"line":6,"col":67},"end":{"line":6,"col":71}},{"start":{"line":12,"col":8},"end":{"line":12,"col":12}},{"start":{"line":24,"col":8},"end":{"line":24,"col":12}}],"notifications":[],"timing":{"clock":18,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 24, characters 8-12:"}
{"sample_id":464,"reply":{"class":"return","value":[{"start":{"line":10,"col":33},"end":{"line":10,"col":40}},{"start":{"line":11,"col":13},"end":{"line":11,"col":20}},{"start":{"line":12,"col":16},"end":{"line":12,"col":23}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 12, characters 16-23:"}
{"sample_id":463,"reply":{"class":"return","value":[{"start":{"line":3,"col":23},"end":{"line":3,"col":28}},{"start":{"line":6,"col":24},"end":{"line":6,"col":29}},{"start":{"line":13,"col":8},"end":{"line":13,"col":13}},{"start":{"line":25,"col":8},"end":{"line":25,"col":13}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 25, characters 8-13:"}
{"sample_id":462,"reply":{"class":"return","value":[{"start":{"line":22,"col":22},"end":{"line":22,"col":23}},{"start":{"line":26,"col":20},"end":{"line":26,"col":21}},{"start":{"line":27,"col":10},"end":{"line":27,"col":11}},{"start":{"line":28,"col":20},"end":{"line":28,"col":21}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 27, characters 10-11:"}
{"sample_id":461,"reply":{"class":"return","value":[{"start":{"line":10,"col":33},"end":{"line":10,"col":40}},{"start":{"line":11,"col":13},"end":{"line":11,"col":20}},{"start":{"line":12,"col":16},"end":{"line":12,"col":23}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 11, characters 13-20:"}
{"sample_id":460,"reply":{"class":"return","value":[{"start":{"line":25,"col":22},"end":{"line":25,"col":26}},{"start":{"line":26,"col":22},"end":{"line":26,"col":26}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 26, characters 22-26:"}
{"sample_id":459,"reply":{"class":"return","value":[{"start":{"line":21,"col":19},"end":{"line":21,"col":20}},{"start":{"line":30,"col":14},"end":{"line":30,"col":15}}],"notifications":[],"timing":{"clock":28,"cpu":28,"query":0,"pp":0,"reader":0,"ppx":28,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 14-15:"}
{"sample_id":458,"reply":{"class":"return","value":[{"start":{"line":22,"col":22},"end":{"line":22,"col":23}},{"start":{"line":26,"col":20},"end":{"line":26,"col":21}},{"start":{"line":27,"col":10},"end":{"line":27,"col":11}},{"start":{"line":28,"col":20},"end":{"line":28,"col":21}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 28, characters 20-21:"}
{"sample_id":457,"reply":{"class":"return","value":[{"start":{"line":2,"col":22},"end":{"line":2,"col":25}},{"start":{"line":6,"col":45},"end":{"line":6,"col":48}},{"start":{"line":6,"col":63},"end":{"line":6,"col":66}},{"start":{"line":7,"col":23},"end":{"line":7,"col":26}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 23-26:"}
{"sample_id":456,"reply":{"class":"return","value":[{"start":{"line":25,"col":22},"end":{"line":25,"col":26}},{"start":{"line":26,"col":22},"end":{"line":26,"col":26}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":18,"typer":1,"error":0}},"loc":"File \"\", line 25, characters 22-26:"}
{"sample_id":455,"reply":{"class":"return","value":[{"start":{"line":2,"col":22},"end":{"line":2,"col":25}},{"start":{"line":6,"col":45},"end":{"line":6,"col":48}},{"start":{"line":6,"col":63},"end":{"line":6,"col":66}},{"start":{"line":7,"col":23},"end":{"line":7,"col":26}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 63-66:"}
{"sample_id":454,"reply":{"class":"return","value":[{"start":{"line":11,"col":12},"end":{"line":11,"col":13}},{"start":{"line":23,"col":12},"end":{"line":23,"col":13}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 23, characters 12-13:"}
{"sample_id":453,"reply":{"class":"return","value":[{"start":{"line":3,"col":16},"end":{"line":3,"col":20}},{"start":{"line":6,"col":49},"end":{"line":6,"col":53}},{"start":{"line":6,"col":67},"end":{"line":6,"col":71}},{"start":{"line":12,"col":8},"end":{"line":12,"col":12}},{"start":{"line":24,"col":8},"end":{"line":24,"col":12}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 49-53:"}
{"sample_id":452,"reply":{"class":"return","value":[{"start":{"line":2,"col":22},"end":{"line":2,"col":25}},{"start":{"line":6,"col":45},"end":{"line":6,"col":48}},{"start":{"line":6,"col":63},"end":{"line":6,"col":66}},{"start":{"line":7,"col":23},"end":{"line":7,"col":26}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 45-48:"}
{"sample_id":451,"reply":{"class":"return","value":[{"start":{"line":25,"col":16},"end":{"line":25,"col":20}},{"start":{"line":27,"col":12},"end":{"line":27,"col":16}}],"notifications":[],"timing":{"clock":18,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 27, characters 12-16:"}
{"sample_id":450,"reply":{"class":"return","value":[{"start":{"line":6,"col":17},"end":{"line":6,"col":21}},{"start":{"line":6,"col":32},"end":{"line":6,"col":36}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 32-36:"}
{"sample_id":449,"reply":{"class":"return","value":[{"start":{"line":6,"col":17},"end":{"line":6,"col":21}},{"start":{"line":6,"col":32},"end":{"line":6,"col":36}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 32-36:"}
{"sample_id":448,"reply":{"class":"return","value":[{"start":{"line":9,"col":13},"end":{"line":9,"col":17}},{"start":{"line":19,"col":16},"end":{"line":19,"col":20}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 16-20:"}
{"sample_id":447,"reply":{"class":"return","value":[{"start":{"line":25,"col":28},"end":{"line":25,"col":33}},{"start":{"line":28,"col":22},"end":{"line":28,"col":27}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 25, characters 28-33:"}
{"sample_id":446,"reply":{"class":"return","value":[{"start":{"line":2,"col":10},"end":{"line":2,"col":11}},{"start":{"line":4,"col":42},"end":{"line":4,"col":43}},{"start":{"line":4,"col":56},"end":{"line":4,"col":57}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 4, characters 42-43:"}
{"sample_id":445,"reply":{"class":"return","value":[{"start":{"line":22,"col":12},"end":{"line":22,"col":20}},{"start":{"line":26,"col":10},"end":{"line":26,"col":18}},{"start":{"line":28,"col":10},"end":{"line":28,"col":18}},{"start":{"line":30,"col":4},"end":{"line":30,"col":12}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 4-12:"}
{"sample_id":444,"reply":{"class":"return","value":[{"start":{"line":2,"col":17},"end":{"line":2,"col":21}},{"start":{"line":3,"col":9},"end":{"line":3,"col":13}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 17-21:"}
{"sample_id":443,"reply":{"class":"return","value":[{"start":{"line":2,"col":22},"end":{"line":2,"col":25}},{"start":{"line":6,"col":45},"end":{"line":6,"col":48}},{"start":{"line":6,"col":63},"end":{"line":6,"col":66}},{"start":{"line":7,"col":23},"end":{"line":7,"col":26}}],"notifications":[],"timing":{"clock":27,"cpu":27,"query":0,"pp":0,"reader":2,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 22-25:"}
{"sample_id":440,"reply":{"class":"return","value":[{"start":{"line":12,"col":27},"end":{"line":12,"col":37},"type":"'a -> 'a node","tail":"no"},{"start":{"line":12,"col":27},"end":{"line":12,"col":37},"type":"Data.t -> Data.t node","tail":"no"},{"start":{"line":12,"col":27},"end":{"line":12,"col":46},"type":"Data.t node","tail":"no"},{"start":{"line":12,"col":16},"end":{"line":12,"col":46},"type":"unit","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 12, characters 27-37:"}
{"sample_id":439,"reply":{"class":"return","value":[{"start":{"line":19,"col":21},"end":{"line":19,"col":25},"type":"Data.t t","tail":"no"},{"start":{"line":19,"col":21},"end":{"line":19,"col":25},"type":"Data.t t","tail":"no"},{"start":{"line":19,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":24,"query":6,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 4-25:"}
{"sample_id":438,"reply":{"class":"return","value":[{"start":{"line":17,"col":22},"end":{"line":17,"col":30},"type":"Data.t","tail":"no"},{"start":{"line":17,"col":22},"end":{"line":17,"col":30},"type":"Data.t","tail":"no"},{"start":{"line":17,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":14,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 22-30:"}
{"sample_id":437,"reply":{"class":"return","value":[{"start":{"line":15,"col":37},"end":{"line":15,"col":44},"type":"Data.t","tail":"no"},{"start":{"line":15,"col":37},"end":{"line":15,"col":44},"type":"Data.t","tail":"no"},{"start":{"line":15,"col":15},"end":{"line":15,"col":44},"type":"int","tail":"no"},{"start":{"line":15,"col":15},"end":{"line":15,"col":48},"type":"bool","tail":"no"},{"start":{"line":15,"col":12},"end":{"line":15,"col":69},"type":"Data.t t","tail":"no"},{"start":{"line":14,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 15-44:"}
{"sample_id":436,"reply":{"class":"return","value":[{"start":{"line":15,"col":45},"end":{"line":15,"col":46},"type":"int -> int -> bool","tail":"no"},{"start":{"line":15,"col":15},"end":{"line":15,"col":48},"type":"bool","tail":"no"},{"start":{"line":15,"col":12},"end":{"line":15,"col":69},"type":"Data.t t","tail":"no"},{"start":{"line":14,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 45-46:"}
{"sample_id":435,"reply":{"class":"return","value":[{"start":{"line":11,"col":13},"end":{"line":11,"col":20},"type":"Data.t t","tail":"no"},{"start":{"line":11,"col":13},"end":{"line":11,"col":20},"type":"Data.t t","tail":"no"},{"start":{"line":11,"col":12},"end":{"line":11,"col":20},"type":"Data.t node","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 11, characters 13-20:"}
{"sample_id":434,"reply":{"class":"return","value":[{"start":{"line":17,"col":10},"end":{"line":17,"col":21},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":17,"col":10},"end":{"line":17,"col":21},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":17,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":14,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 10-21:"}
{"sample_id":433,"reply":{"class":"return","value":[{"start":{"line":28,"col":10},"end":{"line":28,"col":18},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":28,"col":10},"end":{"line":28,"col":18},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":28,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":27,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":26,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":23,"col":6},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":22,"col":24},"end":{"line":28,"col":27},"type":"'a t -> unit","tail":"no"},{"start":{"line":22,"col":21},"end":{"line":28,"col":27},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":22,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":21,"col":21},"end":{"line":30,"col":20},"type":"'a t -> unit","tail":"no"},{"start":{"line":21,"col":18},"end":{"line":30,"col":20},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 28, characters 10-18:"}
{"sample_id":432,"reply":{"class":"return","value":[{"start":{"line":17,"col":31},"end":{"line":17,"col":36},"type":"Data.t t","tail":"no"},{"start":{"line":17,"col":31},"end":{"line":17,"col":36},"type":"Data.t t","tail":"no"},{"start":{"line":17,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":14,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":26,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 31-36:"}
{"sample_id":431,"reply":{"class":"return","value":[{"start":{"line":30,"col":16},"end":{"line":30,"col":20},"type":"'a t","tail":"no"},{"start":{"line":30,"col":16},"end":{"line":30,"col":20},"type":"'a t","tail":"no"},{"start":{"line":30,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":22,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":21,"col":21},"end":{"line":30,"col":20},"type":"'a t -> unit","tail":"no"},{"start":{"line":21,"col":18},"end":{"line":30,"col":20},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 22, characters 4-219:"}
{"sample_id":430,"reply":{"class":"return","value":[{"start":{"line":28,"col":20},"end":{"line":28,"col":21},"type":"'a -> unit","tail":"no"},{"start":{"line":28,"col":20},"end":{"line":28,"col":21},"type":"'a -> unit","tail":"no"},{"start":{"line":28,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":27,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":26,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":23,"col":6},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":22,"col":24},"end":{"line":28,"col":27},"type":"'a t -> unit","tail":"no"},{"start":{"line":22,"col":21},"end":{"line":28,"col":27},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":22,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":21,"col":21},"end":{"line":30,"col":20},"type":"'a t -> unit","tail":"no"},{"start":{"line":21,"col":18},"end":{"line":30,"col":20},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 28, characters 20-21:"}
{"sample_id":429,"reply":{"class":"return","value":[{"start":{"line":30,"col":16},"end":{"line":30,"col":20},"type":"'a t","tail":"no"},{"start":{"line":30,"col":16},"end":{"line":30,"col":20},"type":"'a t","tail":"no"},{"start":{"line":30,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":22,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":21,"col":21},"end":{"line":30,"col":20},"type":"'a t -> unit","tail":"no"},{"start":{"line":21,"col":18},"end":{"line":30,"col":20},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 21, characters 21-247:"}
{"sample_id":428,"reply":{"class":"return","value":[{"start":{"line":23,"col":13},"end":{"line":23,"col":20},"type":"'a t","tail":"no"},{"start":{"line":23,"col":13},"end":{"line":23,"col":20},"type":"'a t","tail":"no"},{"start":{"line":23,"col":12},"end":{"line":23,"col":20},"type":"'a node","tail":"no"},{"start":{"line":23,"col":6},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":22,"col":24},"end":{"line":28,"col":27},"type":"'a t -> unit","tail":"no"},{"start":{"line":22,"col":21},"end":{"line":28,"col":27},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":22,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":21,"col":21},"end":{"line":30,"col":20},"type":"'a t -> unit","tail":"no"},{"start":{"line":21,"col":18},"end":{"line":30,"col":20},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":28,"cpu":28,"query":11,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 23, characters 13-20:"}
{"sample_id":427,"reply":{"class":"return","value":[{"start":{"line":28,"col":22},"end":{"line":28,"col":27},"type":"'a t","tail":"no"},{"start":{"line":28,"col":22},"end":{"line":28,"col":27},"type":"'a t","tail":"no"},{"start":{"line":28,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":27,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":26,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":23,"col":6},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":22,"col":24},"end":{"line":28,"col":27},"type":"'a t -> unit","tail":"no"},{"start":{"line":22,"col":21},"end":{"line":28,"col":27},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":22,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":21,"col":21},"end":{"line":30,"col":20},"type":"'a t -> unit","tail":"no"},{"start":{"line":21,"col":18},"end":{"line":30,"col":20},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 23, characters 6-157:"}
{"sample_id":426,"reply":{"class":"return","value":[{"start":{"line":7,"col":39},"end":{"line":7,"col":43},"type":"'a","tail":"no"},{"start":{"line":7,"col":39},"end":{"line":7,"col":43},"type":"'a","tail":"no"},{"start":{"line":7,"col":27},"end":{"line":7,"col":44},"type":"'a node","tail":"no"},{"start":{"line":7,"col":23},"end":{"line":7,"col":44},"type":"'a node ref","tail":"no"},{"start":{"line":7,"col":16},"end":{"line":7,"col":44},"type":"'a -> 'a node ref","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":2,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 39-43:"}
{"sample_id":425,"reply":{"class":"return","value":[{"start":{"line":19,"col":4},"end":{"line":19,"col":15},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":19,"col":4},"end":{"line":19,"col":15},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":19,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 4-15:"}
{"sample_id":424,"reply":{"class":"return","value":[{"start":{"line":7,"col":39},"end":{"line":7,"col":43},"type":"'a","tail":"no"},{"start":{"line":7,"col":39},"end":{"line":7,"col":43},"type":"'a","tail":"no"},{"start":{"line":7,"col":27},"end":{"line":7,"col":44},"type":"'a node","tail":"no"},{"start":{"line":7,"col":23},"end":{"line":7,"col":44},"type":"'a node ref","tail":"no"},{"start":{"line":7,"col":16},"end":{"line":7,"col":44},"type":"'a -> 'a node ref","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 27-44:"}
{"sample_id":423,"reply":{"class":"return","value":[{"start":{"line":15,"col":65},"end":{"line":15,"col":69},"type":"Data.t t","tail":"no"},{"start":{"line":15,"col":65},"end":{"line":15,"col":69},"type":"Data.t t","tail":"no"},{"start":{"line":15,"col":12},"end":{"line":15,"col":69},"type":"Data.t t","tail":"no"},{"start":{"line":14,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 65-69:"}
{"sample_id":422,"reply":{"class":"return","value":[{"start":{"line":7,"col":39},"end":{"line":7,"col":43},"type":"'a","tail":"no"},{"start":{"line":7,"col":39},"end":{"line":7,"col":43},"type":"'a","tail":"no"},{"start":{"line":7,"col":27},"end":{"line":7,"col":44},"type":"'a node","tail":"no"},{"start":{"line":7,"col":23},"end":{"line":7,"col":44},"type":"'a node ref","tail":"no"},{"start":{"line":7,"col":16},"end":{"line":7,"col":44},"type":"'a -> 'a node ref","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 23-44:"}
{"sample_id":421,"reply":{"class":"return","value":[{"start":{"line":7,"col":39},"end":{"line":7,"col":43},"type":"'a","tail":"no"},{"start":{"line":7,"col":39},"end":{"line":7,"col":43},"type":"'a","tail":"no"},{"start":{"line":7,"col":27},"end":{"line":7,"col":44},"type":"'a node","tail":"no"},{"start":{"line":7,"col":23},"end":{"line":7,"col":44},"type":"'a node ref","tail":"no"},{"start":{"line":7,"col":16},"end":{"line":7,"col":44},"type":"'a -> 'a node ref","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":7,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 16-44:"}
{"sample_id":420,"reply":{"class":"return","value":[{"start":{"line":28,"col":22},"end":{"line":28,"col":27},"type":"'a t","tail":"no"},{"start":{"line":28,"col":22},"end":{"line":28,"col":27},"type":"'a t","tail":"no"},{"start":{"line":28,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":27,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":26,"col":10},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":23,"col":6},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":22,"col":24},"end":{"line":28,"col":27},"type":"'a t -> unit","tail":"no"},{"start":{"line":22,"col":21},"end":{"line":28,"col":27},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":22,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":21,"col":21},"end":{"line":30,"col":20},"type":"'a t -> unit","tail":"no"},{"start":{"line":21,"col":18},"end":{"line":30,"col":20},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 22, characters 21-191:"}
{"sample_id":419,"reply":{"class":"return","value":[{"start":{"line":6,"col":63},"end":{"line":6,"col":66},"type":"'a -> 'a ref","tail":"no"},{"start":{"line":6,"col":63},"end":{"line":6,"col":66},"type":"'a node -> 'a t","tail":"no"},{"start":{"line":6,"col":63},"end":{"line":6,"col":71},"type":"'a t","tail":"no"},{"start":{"line":6,"col":30},"end":{"line":6,"col":73},"type":"'a content","tail":"no"},{"start":{"line":6,"col":24},"end":{"line":6,"col":73},"type":"'a node","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":73},"type":"'a -> 'a node","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 63-66:"}
{"sample_id":418,"reply":{"class":"return","value":[{"start":{"line":6,"col":67},"end":{"line":6,"col":71},"type":"'a node","tail":"no"},{"start":{"line":6,"col":67},"end":{"line":6,"col":71},"type":"'a node","tail":"no"},{"start":{"line":6,"col":63},"end":{"line":6,"col":71},"type":"'a t","tail":"no"},{"start":{"line":6,"col":30},"end":{"line":6,"col":73},"type":"'a content","tail":"no"},{"start":{"line":6,"col":24},"end":{"line":6,"col":73},"type":"'a node","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":73},"type":"'a -> 'a node","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":1,"pp":0,"reader":3,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 63-71:"}
{"sample_id":417,"reply":{"class":"return","value":[{"start":{"line":15,"col":47},"end":{"line":15,"col":48},"type":"int","tail":"no"},{"start":{"line":15,"col":15},"end":{"line":15,"col":48},"type":"bool","tail":"no"},{"start":{"line":15,"col":12},"end":{"line":15,"col":69},"type":"Data.t t","tail":"no"},{"start":{"line":14,"col":10},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":11,"col":6},"end":{"line":17,"col":36},"type":"unit","tail":"no"},{"start":{"line":10,"col":33},"end":{"line":17,"col":36},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":24},"end":{"line":17,"col":36},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 47-48:"}
{"sample_id":416,"reply":{"class":"return","value":[{"start":{"line":19,"col":16},"end":{"line":19,"col":20},"type":"Data.t","tail":"no"},{"start":{"line":19,"col":16},"end":{"line":19,"col":20},"type":"Data.t","tail":"no"},{"start":{"line":19,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":10,"col":4},"end":{"line":19,"col":25},"type":"unit","tail":"no"},{"start":{"line":9,"col":18},"end":{"line":19,"col":25},"type":"Data.t t -> unit","tail":"no"},{"start":{"line":9,"col":13},"end":{"line":19,"col":25},"type":"Data.t -> Data.t t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 16-20:"}
{"sample_id":415,"reply":{"class":"return","value":[{"start":{"line":6,"col":49},"end":{"line":6,"col":53},"type":"'a node","tail":"no"},{"start":{"line":6,"col":49},"end":{"line":6,"col":53},"type":"'a node","tail":"no"},{"start":{"line":6,"col":45},"end":{"line":6,"col":53},"type":"'a t","tail":"no"},{"start":{"line":6,"col":30},"end":{"line":6,"col":73},"type":"'a content","tail":"no"},{"start":{"line":6,"col":24},"end":{"line":6,"col":73},"type":"'a node","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":73},"type":"'a -> 'a node","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":2,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 45-53:"}
{"sample_id":414,"reply":{"class":"return","value":[{"start":{"line":23,"col":12},"end":{"line":23,"col":13},"type":"'a t -> 'a node","tail":"no"},{"start":{"line":23,"col":12},"end":{"line":23,"col":20},"type":"'a node","tail":"no"},{"start":{"line":23,"col":6},"end":{"line":28,"col":27},"type":"unit","tail":"no"},{"start":{"line":22,"col":24},"end":{"line":28,"col":27},"type":"'a t -> unit","tail":"no"},{"start":{"line":22,"col":21},"end":{"line":28,"col":27},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":22,"col":4},"end":{"line":30,"col":20},"type":"unit","tail":"no"},{"start":{"line":21,"col":21},"end":{"line":30,"col":20},"type":"'a t -> unit","tail":"no"},{"start":{"line":21,"col":18},"end":{"line":30,"col":20},"type":"f:('a -> unit) -> 'a t -> unit","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 23, characters 12-13:"}
{"sample_id":413,"reply":{"class":"return","value":[{"start":{"line":6,"col":30},"end":{"line":6,"col":73},"type":"'a content","tail":"no"},{"start":{"line":6,"col":24},"end":{"line":6,"col":73},"type":"'a node","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":73},"type":"'a -> 'a node","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 30-73:"}
{"sample_id":412,"reply":{"class":"return","value":[{"start":{"line":6,"col":30},"end":{"line":6,"col":73},"type":"'a content","tail":"no"},{"start":{"line":6,"col":24},"end":{"line":6,"col":73},"type":"'a node","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":73},"type":"'a -> 'a node","tail":"no"},{"start":{"line":1,"col":39},"end":{"line":31,"col":3},"type":"sig\n  type 'a t = 'a node ref\n  and 'a node = Leaf | Inner of 'a content\n  and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n  val make_inner : 'a -> 'a node\n  val singleton : 'a -> 'a node ref\n  val insert : Data.t -> Data.t t -> unit\n  val sorted_iter : f:('a -> unit) -> 'a t -> unit\nend","tail":"no"},{"start":{"line":1,"col":12},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":31,"col":3},"type":"functor (Data : Map.OrderedType) ->\n  sig\n    type 'a t = 'a node ref\n    and 'a node = Leaf | Inner of 'a content\n    and 'a content = { data : 'a; left : 'a t; right : 'a t; }\n    val make_inner : 'a -> 'a node\n    val singleton : 'a -> 'a node ref\n    val insert : Data.t -> Data.t t -> unit\n    val sorted_iter : f:('a -> unit) -> 'a t -> unit\n  end","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":20,"query":1,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 24-73:"}
{"sample_id":409,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":18,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 11, characters 12-13:"}
{"sample_id":408,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: t","notifications":[],"timing":{"clock":18,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 28-36:"}
{"sample_id":407,"reply":{"class":"return","value":[{"start":{"line":15,"col":15},"end":{"line":15,"col":44}},"(match Data.compare new_data current with | 0 -> _ | _ -> _)"],"notifications":[],"timing":{"clock":27,"cpu":27,"query":10,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 15-44:"}
{"sample_id":406,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":20,"cpu":19,"query":0,"pp":0,"reader":2,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 12, characters 27-37:"}
{"sample_id":405,"reply":{"class":"return","value":[{"start":{"line":12,"col":27},"end":{"line":12,"col":46}},"(match make_inner new_data with | Leaf -> _ | Inner _ -> _)"],"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":2,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 12, characters 27-46:"}
{"sample_id":404,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: t","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 10, characters 24-32:"}
{"sample_id":403,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 45-46:"}
{"sample_id":402,"reply":{"class":"return","value":[{"start":{"line":26,"col":22},"end":{"line":26,"col":26}},"(match left with | { contents } -> _)"],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 26, characters 22-26:"}
{"sample_id":401,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 15-27:"}
{"sample_id":400,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 10-21:"}
{"sample_id":399,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 4-12:"}
{"sample_id":398,"reply":{"class":"return","value":[{"start":{"line":27,"col":10},"end":{"line":27,"col":16}},"(match f data with | () -> _)"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 27, characters 10-16:"}
{"sample_id":397,"reply":{"class":"return","value":[{"start":{"line":19,"col":21},"end":{"line":19,"col":25}},"(match tree with | { contents } -> _)"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 21-25:"}
{"sample_id":396,"reply":{"class":"return","value":[{"start":{"line":19,"col":4},"end":{"line":19,"col":25}},"match update_tree new_ tree with | () -> _"],"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":2,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 4-25:"}
{"sample_id":395,"reply":{"class":"return","value":[{"start":{"line":27,"col":10},"end":{"line":28,"col":27}},"(match f data; traverse ~f right with | () -> _)"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 27, characters 10-45:"}
{"sample_id":394,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: t","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 37-44:"}
{"sample_id":393,"reply":{"class":"return","value":[{"start":{"line":7,"col":23},"end":{"line":7,"col":44}},"match ref (make_inner data) with | { contents } -> _"],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 23-44:"}
{"sample_id":392,"reply":{"class":"return","value":[{"start":{"line":15,"col":12},"end":{"line":15,"col":69}},"match if (Data.compare new_data current) > 0 then right else left with\n| { contents } -> _"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 12-69:"}
{"sample_id":391,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 16-44:"}
{"sample_id":390,"reply":{"class":"return","value":[{"start":{"line":6,"col":67},"end":{"line":6,"col":71}},"(match Leaf with | Leaf -> _ | Inner _ -> _)"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 67-71:"}
{"sample_id":389,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: t","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 22-30:"}
{"sample_id":388,"reply":{"class":"return","value":[{"start":{"line":6,"col":63},"end":{"line":6,"col":71}},"(match ref Leaf with | { contents } -> _)"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 63-71:"}
{"sample_id":387,"reply":{"class":"return","value":[{"start":{"line":6,"col":49},"end":{"line":6,"col":53}},"(match Leaf with | Leaf -> _ | Inner _ -> _)"],"notifications":[],"timing":{"clock":32,"cpu":32,"query":14,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 49-53:"}
{"sample_id":386,"reply":{"class":"return","value":[{"start":{"line":13,"col":38},"end":{"line":13,"col":43}},"{ contents }"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":1,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 13, characters 38-43:"}
{"sample_id":385,"reply":{"class":"return","value":[{"start":{"line":15,"col":47},"end":{"line":15,"col":48}},"(match 0 with | 0 -> _ | _ -> _)"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 47-48:"}
{"sample_id":384,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 32-36:"}
{"sample_id":383,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: t","notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 16-20:"}
{"sample_id":382,"reply":{"class":"return","value":[{"start":{"line":6,"col":24},"end":{"line":6,"col":73}},"match Inner { right = (ref Leaf); left = (ref Leaf); data } with\n| Leaf -> _\n| Inner _ -> _"],"notifications":[],"timing":{"clock":21,"cpu":21,"query":1,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 24-73:"}
{"sample_id":381,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":27,"cpu":26,"query":0,"pp":0,"reader":0,"ppx":26,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 17-21:"}
{"sample_id":378,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":69,"col":0}},"notifications":[],"timing":{"clock":29,"cpu":29,"query":0,"pp":0,"reader":10,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 45-46:"}
{"sample_id":377,"reply":{"class":"return","value":"Already at definition point","notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 25, characters 16-20:"}
{"sample_id":376,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 24, characters 16-18:"}
{"sample_id":375,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":10,"col":12}},"notifications":[],"timing":{"clock":19,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 10-21:"}
{"sample_id":374,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":13,"col":32}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 65-69:"}
{"sample_id":373,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":10,"col":24}},"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 12, characters 38-46:"}
{"sample_id":372,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":3,"col":2}},"notifications":[],"timing":{"clock":21,"cpu":21,"query":2,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 24, characters 8-12:"}
{"sample_id":371,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":10,"col":33}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 12, characters 16-23:"}
{"sample_id":370,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":3,"col":2}},"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":2,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 25, characters 8-13:"}
{"sample_id":369,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":22,"col":22}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 27, characters 10-11:"}
{"sample_id":368,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":10,"col":33}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 11, characters 13-20:"}
{"sample_id":367,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":25,"col":22}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 26, characters 22-26:"}
{"sample_id":366,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":21,"col":19}},"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 14-15:"}
{"sample_id":365,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":22,"col":22}},"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 28, characters 20-21:"}
{"sample_id":364,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":238,"col":0}},"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 7, characters 23-26:"}
{"sample_id":363,"reply":{"class":"return","value":"Already at definition point","notifications":[],"timing":{"clock":27,"cpu":27,"query":0,"pp":0,"reader":0,"ppx":26,"typer":0,"error":0}},"loc":"File \"\", line 25, characters 22-26:"}
{"sample_id":362,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":238,"col":0}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 63-66:"}
{"sample_id":361,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":21,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 23, characters 12-13:"}
{"sample_id":360,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":3,"col":2}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 49-53:"}
{"sample_id":359,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":238,"col":0}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 45-48:"}
{"sample_id":358,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":25,"col":16}},"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 27, characters 12-16:"}
{"sample_id":357,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":6,"col":17}},"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 32-36:"}
{"sample_id":356,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":6,"col":17}},"notifications":[],"timing":{"clock":32,"cpu":32,"query":0,"pp":0,"reader":0,"ppx":31,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 32-36:"}
{"sample_id":355,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":9,"col":13}},"notifications":[],"timing":{"clock":28,"cpu":28,"query":0,"pp":0,"reader":0,"ppx":27,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 16-20:"}
{"sample_id":354,"reply":{"class":"return","value":"Already at definition point","notifications":[],"timing":{"clock":54,"cpu":54,"query":20,"pp":0,"reader":0,"ppx":34,"typer":0,"error":0}},"loc":"File \"\", line 25, characters 28-33:"}
{"sample_id":353,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":2,"col":2}},"notifications":[],"timing":{"clock":33,"cpu":33,"query":0,"pp":0,"reader":0,"ppx":32,"typer":0,"error":0}},"loc":"File \"\", line 4, characters 42-43:"}
{"sample_id":352,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":22,"col":12}},"notifications":[],"timing":{"clock":25,"cpu":25,"query":0,"pp":0,"reader":0,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 4-12:"}
{"sample_id":351,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/bin_tree.ml","pos":{"line":3,"col":2}},"notifications":[],"timing":{"clock":29,"cpu":29,"query":0,"pp":0,"reader":0,"ppx":28,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 17-21:"}
{"sample_id":350,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":237,"col":0}},"notifications":[],"timing":{"clock":32,"cpu":32,"query":0,"pp":0,"reader":0,"ppx":31,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 22-25:"}
{"sample_id":347,"reply":{"class":"return","value":[{"start":{"line":13,"col":25},"end":{"line":13,"col":27}},{"start":{"line":17,"col":11},"end":{"line":17,"col":13}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 11-13:"}
{"sample_id":346,"reply":{"class":"return","value":[{"start":{"line":13,"col":33},"end":{"line":13,"col":37}},{"start":{"line":17,"col":6},"end":{"line":17,"col":10}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 6-10:"}
{"sample_id":345,"reply":{"class":"return","value":[{"start":{"line":13,"col":29},"end":{"line":13,"col":31}},{"start":{"line":16,"col":73},"end":{"line":16,"col":75}}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 73-75:"}
{"sample_id":344,"reply":{"class":"return","value":[{"start":{"line":15,"col":11},"end":{"line":15,"col":20}},{"start":{"line":16,"col":63},"end":{"line":16,"col":72}}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":0,"pp":0,"reader":3,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 63-72:"}
{"sample_id":343,"reply":{"class":"return","value":[{"start":{"line":16,"col":38},"end":{"line":16,"col":39}},{"start":{"line":16,"col":59},"end":{"line":16,"col":60}}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 59-60:"}
{"sample_id":342,"reply":{"class":"return","value":[{"start":{"line":15,"col":21},"end":{"line":15,"col":22}},{"start":{"line":16,"col":56},"end":{"line":16,"col":57}}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":5,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 56-57:"}
{"sample_id":341,"reply":{"class":"return","value":[{"start":{"line":16,"col":28},"end":{"line":16,"col":37}},{"start":{"line":16,"col":45},"end":{"line":16,"col":54}}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 45-54:"}
{"sample_id":340,"reply":{"class":"return","value":[{"start":{"line":13,"col":38},"end":{"line":13,"col":39}},{"start":{"line":16,"col":43},"end":{"line":16,"col":44}}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 43-44:"}
{"sample_id":339,"reply":{"class":"return","value":[{"start":{"line":14,"col":4},"end":{"line":14,"col":18}},{"start":{"line":16,"col":8},"end":{"line":16,"col":22}}],"notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":0,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 8-22:"}
{"sample_id":338,"reply":{"class":"return","value":[{"start":{"line":14,"col":4},"end":{"line":14,"col":18}},{"start":{"line":16,"col":8},"end":{"line":16,"col":22}}],"notifications":[],"timing":{"clock":30,"cpu":29,"query":0,"pp":0,"reader":0,"ppx":29,"typer":0,"error":0}},"loc":"File \"\", line 14, characters 4-18:"}
{"sample_id":337,"reply":{"class":"return","value":[{"start":{"line":11,"col":10},"end":{"line":11,"col":21}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 11, characters 10-21:"}
{"sample_id":336,"reply":{"class":"return","value":[{"start":{"line":6,"col":19},"end":{"line":6,"col":20}},{"start":{"line":6,"col":37},"end":{"line":6,"col":38}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 37-38:"}
{"sample_id":335,"reply":{"class":"return","value":[{"start":{"line":6,"col":17},"end":{"line":6,"col":18}},{"start":{"line":6,"col":35},"end":{"line":6,"col":36}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":2,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 35-36:"}
{"sample_id":334,"reply":{"class":"return","value":[{"start":{"line":6,"col":23},"end":{"line":6,"col":34}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 23-34:"}
{"sample_id":333,"reply":{"class":"return","value":[{"start":{"line":5,"col":17},"end":{"line":5,"col":18}},{"start":{"line":5,"col":36},"end":{"line":5,"col":37}}],"notifications":[],"timing":{"clock":19,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 36-37:"}
{"sample_id":332,"reply":{"class":"return","value":[{"start":{"line":5,"col":19},"end":{"line":5,"col":20}},{"start":{"line":5,"col":34},"end":{"line":5,"col":35}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 34-35:"}
{"sample_id":331,"reply":{"class":"return","value":[{"start":{"line":5,"col":23},"end":{"line":5,"col":33}}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":0,"pp":0,"reader":0,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 23-33:"}
{"sample_id":328,"reply":{"class":"return","value":[{"start":{"line":16,"col":59},"end":{"line":16,"col":60},"type":"'a","tail":"no"},{"start":{"line":16,"col":59},"end":{"line":16,"col":60},"type":"'a","tail":"no"},{"start":{"line":16,"col":55},"end":{"line":16,"col":61},"type":"'a * 'b","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":3,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 59-60:"}
{"sample_id":327,"reply":{"class":"return","value":[{"start":{"line":16,"col":56},"end":{"line":16,"col":57},"type":"'a","tail":"no"},{"start":{"line":16,"col":56},"end":{"line":16,"col":57},"type":"'a","tail":"no"},{"start":{"line":16,"col":55},"end":{"line":16,"col":61},"type":"'a * 'b","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":20,"query":2,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 56-57:"}
{"sample_id":326,"reply":{"class":"return","value":[{"start":{"line":16,"col":59},"end":{"line":16,"col":60},"type":"'a","tail":"no"},{"start":{"line":16,"col":59},"end":{"line":16,"col":60},"type":"'a","tail":"no"},{"start":{"line":16,"col":55},"end":{"line":16,"col":61},"type":"'a * 'b","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":22,"query":5,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 55-61:"}
{"sample_id":325,"reply":{"class":"return","value":[{"start":{"line":16,"col":45},"end":{"line":16,"col":54},"type":"'a","tail":"no"},{"start":{"line":16,"col":45},"end":{"line":16,"col":54},"type":"'a","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":4,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 45-54:"}
{"sample_id":324,"reply":{"class":"return","value":[{"start":{"line":16,"col":43},"end":{"line":16,"col":44},"type":"'a -> 'b * 'c -> 'a","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":44},"type":"'a -> 'b * 'c -> 'a","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":3,"pp":0,"reader":2,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 43-44:"}
{"sample_id":323,"reply":{"class":"return","value":[{"start":{"line":16,"col":59},"end":{"line":16,"col":60},"type":"'a","tail":"no"},{"start":{"line":16,"col":59},"end":{"line":16,"col":60},"type":"'a","tail":"no"},{"start":{"line":16,"col":55},"end":{"line":16,"col":61},"type":"'a * 'b","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":5,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 43-61:"}
{"sample_id":322,"reply":{"class":"return","value":[{"start":{"line":16,"col":59},"end":{"line":16,"col":60},"type":"'a","tail":"no"},{"start":{"line":16,"col":59},"end":{"line":16,"col":60},"type":"'a","tail":"no"},{"start":{"line":16,"col":55},"end":{"line":16,"col":61},"type":"'a * 'b","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":4,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 38-61:"}
{"sample_id":321,"reply":{"class":"return","value":[{"start":{"line":16,"col":55},"end":{"line":16,"col":61},"type":"'a * 'b","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":3,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 23-62:"}
{"sample_id":320,"reply":{"class":"return","value":[{"start":{"line":17,"col":6},"end":{"line":17,"col":10},"type":"'a","tail":"no"},{"start":{"line":17,"col":6},"end":{"line":17,"col":10},"type":"'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":2,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 6-10:"}
{"sample_id":319,"reply":{"class":"return","value":[{"start":{"line":16,"col":73},"end":{"line":16,"col":75},"type":"'a t","tail":"no"},{"start":{"line":16,"col":73},"end":{"line":16,"col":75},"type":"'a t","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":2,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 8-75:"}
{"sample_id":318,"reply":{"class":"return","value":[{"start":{"line":16,"col":73},"end":{"line":16,"col":75},"type":"'a t","tail":"no"},{"start":{"line":16,"col":73},"end":{"line":16,"col":75},"type":"'a t","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":3,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 21-101:"}
{"sample_id":317,"reply":{"class":"return","value":[{"start":{"line":16,"col":73},"end":{"line":16,"col":75},"type":"'a t","tail":"no"},{"start":{"line":16,"col":73},"end":{"line":16,"col":75},"type":"'a t","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":3,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 6-102:"}
{"sample_id":316,"reply":{"class":"return","value":[{"start":{"line":14,"col":4},"end":{"line":14,"col":18},"type":"('a -> 'b -> 'a) -> 'a -> 'b t -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":14,"col":18},"type":"('a -> 'b -> 'a) -> 'a -> 'b t -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":2,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 14, characters 4-18:"}
{"sample_id":315,"reply":{"class":"return","value":[{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":5,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 14, characters 4-135:"}
{"sample_id":314,"reply":{"class":"return","value":[{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":6,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 13, characters 38-177:"}
{"sample_id":313,"reply":{"class":"return","value":[{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":5,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 13, characters 32-177:"}
{"sample_id":312,"reply":{"class":"return","value":[{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":5,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 13, characters 28-177:"}
{"sample_id":311,"reply":{"class":"return","value":[{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":5,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 13, characters 24-177:"}
{"sample_id":310,"reply":{"class":"return","value":[{"start":{"line":6,"col":37},"end":{"line":6,"col":38},"type":"'a -> ('b, 'c) t","tail":"no"},{"start":{"line":6,"col":37},"end":{"line":6,"col":38},"type":"'a -> ('b, 'c) t","tail":"no"},{"start":{"line":6,"col":23},"end":{"line":6,"col":38},"type":"('a, 'b) t","tail":"no"},{"start":{"line":6,"col":19},"end":{"line":6,"col":38},"type":"('a -> ('b, 'c) t) -> ('b, 'c) t","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":38},"type":"('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 37-38:"}
{"sample_id":309,"reply":{"class":"return","value":[{"start":{"line":6,"col":35},"end":{"line":6,"col":36},"type":"('a, 'b) t","tail":"no"},{"start":{"line":6,"col":35},"end":{"line":6,"col":36},"type":"('a, 'b) t","tail":"no"},{"start":{"line":6,"col":23},"end":{"line":6,"col":38},"type":"('a, 'b) t","tail":"no"},{"start":{"line":6,"col":19},"end":{"line":6,"col":38},"type":"('a -> ('b, 'c) t) -> ('b, 'c) t","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":38},"type":"('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":2,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 35-36:"}
{"sample_id":308,"reply":{"class":"return","value":[{"start":{"line":6,"col":23},"end":{"line":6,"col":34},"type":"('a, 'e) t -> ('a -> ('b, 'e) t) -> ('b, 'e) t","tail":"no"},{"start":{"line":6,"col":23},"end":{"line":6,"col":34},"type":"('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t","tail":"no"},{"start":{"line":6,"col":23},"end":{"line":6,"col":38},"type":"('a, 'b) t","tail":"no"},{"start":{"line":6,"col":19},"end":{"line":6,"col":38},"type":"('a -> ('b, 'c) t) -> ('b, 'c) t","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":38},"type":"('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":2,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 23-34:"}
{"sample_id":307,"reply":{"class":"return","value":[{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":17,"col":11},"end":{"line":17,"col":13},"type":"'a t","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":3,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 11-13:"}
{"sample_id":306,"reply":{"class":"return","value":[{"start":{"line":16,"col":73},"end":{"line":16,"col":75},"type":"'a t","tail":"no"},{"start":{"line":16,"col":73},"end":{"line":16,"col":75},"type":"'a t","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":18,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":2,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 73-75:"}
{"sample_id":305,"reply":{"class":"return","value":[{"start":{"line":6,"col":37},"end":{"line":6,"col":38},"type":"'a -> ('b, 'c) t","tail":"no"},{"start":{"line":6,"col":37},"end":{"line":6,"col":38},"type":"'a -> ('b, 'c) t","tail":"no"},{"start":{"line":6,"col":23},"end":{"line":6,"col":38},"type":"('a, 'b) t","tail":"no"},{"start":{"line":6,"col":19},"end":{"line":6,"col":38},"type":"('a -> ('b, 'c) t) -> ('b, 'c) t","tail":"no"},{"start":{"line":6,"col":17},"end":{"line":6,"col":38},"type":"('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":2,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 17-38:"}
{"sample_id":304,"reply":{"class":"return","value":[{"start":{"line":5,"col":36},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":36},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":23},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":19},"end":{"line":5,"col":37},"type":"('a -> 'b) -> ('b, 'c) t","tail":"no"},{"start":{"line":5,"col":17},"end":{"line":5,"col":37},"type":"('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":6,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 36-37:"}
{"sample_id":303,"reply":{"class":"return","value":[{"start":{"line":5,"col":34},"end":{"line":5,"col":35},"type":"'a -> 'b","tail":"no"},{"start":{"line":5,"col":34},"end":{"line":5,"col":35},"type":"'a -> 'b","tail":"no"},{"start":{"line":5,"col":23},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":19},"end":{"line":5,"col":37},"type":"('a -> 'b) -> ('b, 'c) t","tail":"no"},{"start":{"line":5,"col":17},"end":{"line":5,"col":37},"type":"('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 34-35:"}
{"sample_id":302,"reply":{"class":"return","value":[{"start":{"line":5,"col":23},"end":{"line":5,"col":33},"type":"('a -> 'b) -> ('a, 'e) t -> ('b, 'e) t","tail":"no"},{"start":{"line":5,"col":23},"end":{"line":5,"col":33},"type":"('a -> 'b) -> ('a, 'c) t -> ('b, 'c) t","tail":"no"},{"start":{"line":5,"col":23},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":19},"end":{"line":5,"col":37},"type":"('a -> 'b) -> ('b, 'c) t","tail":"no"},{"start":{"line":5,"col":17},"end":{"line":5,"col":37},"type":"('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":4,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 23-33:"}
{"sample_id":301,"reply":{"class":"return","value":[{"start":{"line":5,"col":36},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":36},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":23},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":19},"end":{"line":5,"col":37},"type":"('a -> 'b) -> ('b, 'c) t","tail":"no"},{"start":{"line":5,"col":17},"end":{"line":5,"col":37},"type":"('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":6,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 23-37:"}
{"sample_id":300,"reply":{"class":"return","value":[{"start":{"line":5,"col":36},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":36},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":23},"end":{"line":5,"col":37},"type":"('a, 'b) t","tail":"no"},{"start":{"line":5,"col":19},"end":{"line":5,"col":37},"type":"('a -> 'b) -> ('b, 'c) t","tail":"no"},{"start":{"line":5,"col":17},"end":{"line":5,"col":37},"type":"('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":4,"col":2},"end":{"line":7,"col":5},"type":"sig\n  val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n  val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\nend","tail":"no"},{"start":{"line":1,"col":16},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"},{"start":{"line":1,"col":0},"end":{"line":8,"col":3},"type":"sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":22,"query":1,"pp":0,"reader":0,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 19-37:"}
{"sample_id":297,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 21-22:"}
{"sample_id":296,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 21-101:"}
{"sample_id":295,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 11-20:"}
{"sample_id":294,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 6-102:"}
{"sample_id":293,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 14, characters 4-18:"}
{"sample_id":292,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 14, characters 4-135:"}
{"sample_id":291,"reply":{"class":"return","value":[{"start":{"line":16,"col":55},"end":{"line":16,"col":61}},"(match (x, y) with | (_, _) -> _)"],"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 55-61:"}
{"sample_id":290,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":40,"cpu":40,"query":0,"pp":0,"reader":21,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 13, characters 38-177:"}
{"sample_id":289,"reply":{"class":"return","value":[{"start":{"line":17,"col":11},"end":{"line":17,"col":13}},"(match l1 with | [] -> _ | _::_ -> _)"],"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 11-13:"}
{"sample_id":288,"reply":{"class":"return","value":[{"start":{"line":16,"col":73},"end":{"line":16,"col":75}},"(match l2 with | [] -> _ | _::_ -> _)"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 73-75:"}
{"sample_id":287,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":36,"cpu":36,"query":16,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 45-54:"}
{"sample_id":286,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 63-72:"}
{"sample_id":285,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 38-39:"}
{"sample_id":284,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 38-61:"}
{"sample_id":283,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":0,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 37-38:"}
{"sample_id":282,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 43-61:"}
{"sample_id":281,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 23-34:"}
{"sample_id":280,"reply":{"class":"return","value":[{"start":{"line":6,"col":23},"end":{"line":6,"col":38}},"match Result.bind x f with | Ok _ -> _ | Error _ -> _"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 23-38:"}
{"sample_id":279,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":18,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 19-20:"}
{"sample_id":278,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 19-38:"}
{"sample_id":277,"reply":{"class":"return","value":[{"start":{"line":6,"col":17},"end":{"line":6,"col":18}},"Ok _ | Error _"],"notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 17-18:"}
{"sample_id":276,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":14,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":13,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 28-37:"}
{"sample_id":275,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":14,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 8-22:"}
{"sample_id":274,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":14,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 34-35:"}
{"sample_id":273,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":16,"cpu":16,"query":2,"pp":0,"reader":0,"ppx":13,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 23-33:"}
{"sample_id":272,"reply":{"class":"return","value":[{"start":{"line":5,"col":23},"end":{"line":5,"col":37}},"match Result.map f x with | Ok _ -> _ | Error _ -> _"],"notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 23-37:"}
{"sample_id":271,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 19-20:"}
{"sample_id":270,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 19-37:"}
{"sample_id":269,"reply":{"class":"return","value":[{"start":{"line":5,"col":17},"end":{"line":5,"col":18}},"Ok _ | Error _"],"notifications":[],"timing":{"clock":29,"cpu":28,"query":1,"pp":0,"reader":0,"ppx":27,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 17-18:"}
{"sample_id":266,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":13,"col":25}},"notifications":[],"timing":{"clock":14,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":13,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 11-13:"}
{"sample_id":265,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":13,"col":33}},"notifications":[],"timing":{"clock":14,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 6-10:"}
{"sample_id":264,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":13,"col":29}},"notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 73-75:"}
{"sample_id":263,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":15,"col":11}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 63-72:"}
{"sample_id":262,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":16,"col":38}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 59-60:"}
{"sample_id":261,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":15,"col":21}},"notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 56-57:"}
{"sample_id":260,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":16,"col":28}},"notifications":[],"timing":{"clock":15,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 45-54:"}
{"sample_id":259,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":13,"col":38}},"notifications":[],"timing":{"clock":14,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":13,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 43-44:"}
{"sample_id":258,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/list.ml","pos":{"line":118,"col":8}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 8-22:"}
{"sample_id":257,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/list.ml","pos":{"line":118,"col":8}},"notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 14, characters 4-18:"}
{"sample_id":256,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/list.ml","pos":{"line":1,"col":0}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":2,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 11, characters 10-21:"}
{"sample_id":255,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":6,"col":19}},"notifications":[],"timing":{"clock":15,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 37-38:"}
{"sample_id":254,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":6,"col":17}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":3,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 35-36:"}
{"sample_id":253,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/result.ml","pos":{"line":23,"col":4}},"notifications":[],"timing":{"clock":14,"cpu":14,"query":0,"pp":0,"reader":0,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 23-34:"}
{"sample_id":252,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":5,"col":17}},"notifications":[],"timing":{"clock":17,"cpu":17,"query":2,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 36-37:"}
{"sample_id":251,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/import.ml","pos":{"line":5,"col":19}},"notifications":[],"timing":{"clock":15,"cpu":15,"query":0,"pp":0,"reader":0,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 34-35:"}
{"sample_id":250,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/result.ml","pos":{"line":25,"col":4}},"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 5, characters 23-33:"}
{"sample_id":247,"reply":{"class":"return","value":[{"start":{"line":31,"col":8},"end":{"line":31,"col":9}},{"start":{"line":31,"col":48},"end":{"line":31,"col":49}},{"start":{"line":59,"col":14},"end":{"line":59,"col":15}},{"start":{"line":68,"col":33},"end":{"line":68,"col":34}},{"start":{"line":81,"col":32},"end":{"line":81,"col":33}},{"start":{"line":92,"col":6},"end":{"line":92,"col":7}},{"start":{"line":92,"col":54},"end":{"line":92,"col":55}}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":3,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 31, characters 8-9:"}
{"sample_id":246,"reply":{"class":"return","value":[{"start":{"line":7,"col":15},"end":{"line":7,"col":18}},{"start":{"line":19,"col":17},"end":{"line":19,"col":20}}],"notifications":[],"timing":{"clock":22,"cpu":21,"query":0,"pp":0,"reader":4,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 17-20:"}
{"sample_id":245,"reply":{"class":"return","value":[{"start":{"line":31,"col":30},"end":{"line":31,"col":32}},{"start":{"line":37,"col":22},"end":{"line":37,"col":24}},{"start":{"line":88,"col":15},"end":{"line":88,"col":17}},{"start":{"line":92,"col":28},"end":{"line":92,"col":30}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 37, characters 22-24:"}
{"sample_id":244,"reply":{"class":"return","value":[{"start":{"line":62,"col":41},"end":{"line":62,"col":46}},{"start":{"line":68,"col":55},"end":{"line":68,"col":60}},{"start":{"line":69,"col":46},"end":{"line":69,"col":51}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 69, characters 46-51:"}
{"sample_id":243,"reply":{"class":"return","value":[{"start":{"line":5,"col":0},"end":{"line":5,"col":73}},{"start":{"line":5,"col":17},"end":{"line":5,"col":26}},{"start":{"line":5,"col":17},"end":{"line":5,"col":26}},{"start":{"line":54,"col":20},"end":{"line":54,"col":29}}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":1,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 54, characters 20-29:"}
{"sample_id":242,"reply":{"class":"return","value":[{"start":{"line":86,"col":6},"end":{"line":86,"col":15}},{"start":{"line":92,"col":42},"end":{"line":92,"col":51}},{"start":{"line":95,"col":42},"end":{"line":95,"col":51}}],"notifications":[],"timing":{"clock":19,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 95, characters 42-51:"}
{"sample_id":241,"reply":{"class":"return","value":[{"start":{"line":48,"col":65},"end":{"line":48,"col":70}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 48, characters 65-70:"}
{"sample_id":240,"reply":{"class":"return","value":[{"start":{"line":42,"col":23},"end":{"line":42,"col":24}},{"start":{"line":56,"col":42},"end":{"line":56,"col":43}},{"start":{"line":65,"col":42},"end":{"line":65,"col":43}},{"start":{"line":78,"col":44},"end":{"line":78,"col":45}},{"start":{"line":85,"col":21},"end":{"line":85,"col":22}},{"start":{"line":88,"col":31},"end":{"line":88,"col":32}},{"start":{"line":92,"col":4},"end":{"line":92,"col":5}},{"start":{"line":101,"col":16},"end":{"line":101,"col":17}},{"start":{"line":104,"col":15},"end":{"line":104,"col":16}}],"notifications":[],"timing":{"clock":19,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 85, characters 21-22:"}
{"sample_id":239,"reply":{"class":"return","value":[{"start":{"line":91,"col":8},"end":{"line":91,"col":9}},{"start":{"line":92,"col":26},"end":{"line":92,"col":27}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 92, characters 26-27:"}
{"sample_id":238,"reply":{"class":"return","value":[{"start":{"line":85,"col":6},"end":{"line":85,"col":7}},{"start":{"line":95,"col":29},"end":{"line":95,"col":30}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 95, characters 29-30:"}
{"sample_id":237,"reply":{"class":"return","value":[{"start":{"line":42,"col":26},"end":{"line":42,"col":31}},{"start":{"line":57,"col":31},"end":{"line":57,"col":36}},{"start":{"line":66,"col":31},"end":{"line":66,"col":36}},{"start":{"line":79,"col":17},"end":{"line":79,"col":22}},{"start":{"line":87,"col":31},"end":{"line":87,"col":36}},{"start":{"line":91,"col":31},"end":{"line":91,"col":36}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 66, characters 31-36:"}
{"sample_id":236,"reply":{"class":"return","value":[{"start":{"line":99,"col":14},"end":{"line":99,"col":27}},{"start":{"line":102,"col":15},"end":{"line":102,"col":28}},{"start":{"line":105,"col":15},"end":{"line":105,"col":28}}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":3,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 105, characters 15-28:"}
{"sample_id":235,"reply":{"class":"return","value":[{"start":{"line":7,"col":19},"end":{"line":7,"col":22}},{"start":{"line":13,"col":18},"end":{"line":13,"col":21}},{"start":{"line":16,"col":18},"end":{"line":16,"col":21}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 18-21:"}
{"sample_id":234,"reply":{"class":"return","value":[{"start":{"line":37,"col":25},"end":{"line":37,"col":37}},{"start":{"line":88,"col":18},"end":{"line":88,"col":30}}],"notifications":[],"timing":{"clock":22,"cpu":21,"query":4,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 37, characters 25-37:"}
{"sample_id":233,"reply":{"class":"return","value":[{"start":{"line":76,"col":16},"end":{"line":76,"col":21}},{"start":{"line":81,"col":54},"end":{"line":81,"col":59}},{"start":{"line":82,"col":45},"end":{"line":82,"col":50}},{"start":{"line":95,"col":53},"end":{"line":95,"col":58}}],"notifications":[],"timing":{"clock":21,"cpu":20,"query":4,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 95, characters 53-58:"}
{"sample_id":232,"reply":{"class":"return","value":[{"start":{"line":74,"col":22},"end":{"line":74,"col":23}},{"start":{"line":75,"col":50},"end":{"line":75,"col":51}},{"start":{"line":81,"col":26},"end":{"line":81,"col":27}},{"start":{"line":82,"col":29},"end":{"line":82,"col":30}}],"notifications":[],"timing":{"clock":21,"cpu":20,"query":0,"pp":0,"reader":3,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 82, characters 29-30:"}
{"sample_id":231,"reply":{"class":"return","value":[{"start":{"line":99,"col":14},"end":{"line":99,"col":27}},{"start":{"line":102,"col":15},"end":{"line":102,"col":28}},{"start":{"line":105,"col":15},"end":{"line":105,"col":28}}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":1,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 102, characters 15-28:"}
{"sample_id":230,"reply":{"class":"return","value":[{"start":{"line":21,"col":11},"end":{"line":21,"col":14}},{"start":{"line":21,"col":53},"end":{"line":21,"col":56}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 21, characters 53-56:"}
{"sample_id":229,"reply":{"class":"return","value":[{"start":{"line":74,"col":32},"end":{"line":74,"col":33}},{"start":{"line":78,"col":47},"end":{"line":78,"col":48}},{"start":{"line":82,"col":39},"end":{"line":82,"col":40}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 78, characters 47-48:"}
{"sample_id":228,"reply":{"class":"return","value":[{"start":{"line":68,"col":10},"end":{"line":68,"col":15}},{"start":{"line":69,"col":13},"end":{"line":69,"col":18}},{"start":{"line":72,"col":8},"end":{"line":72,"col":13}},{"start":{"line":81,"col":12},"end":{"line":81,"col":17}},{"start":{"line":82,"col":15},"end":{"line":82,"col":20}}],"notifications":[],"timing":{"clock":19,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 81, characters 12-17:"}
{"sample_id":227,"reply":{"class":"return","value":[{"start":{"line":5,"col":0},"end":{"line":5,"col":73}},{"start":{"line":5,"col":29},"end":{"line":5,"col":39}},{"start":{"line":5,"col":29},"end":{"line":5,"col":39}},{"start":{"line":63,"col":20},"end":{"line":63,"col":30}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 63, characters 20-30:"}
{"sample_id":226,"reply":{"class":"return","value":[{"start":{"line":31,"col":8},"end":{"line":31,"col":9}},{"start":{"line":31,"col":48},"end":{"line":31,"col":49}},{"start":{"line":59,"col":14},"end":{"line":59,"col":15}},{"start":{"line":68,"col":33},"end":{"line":68,"col":34}},{"start":{"line":81,"col":32},"end":{"line":81,"col":33}},{"start":{"line":92,"col":6},"end":{"line":92,"col":7}},{"start":{"line":92,"col":54},"end":{"line":92,"col":55}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 31, characters 48-49:"}
{"sample_id":225,"reply":{"class":"return","value":[{"start":{"line":23,"col":4},"end":{"line":23,"col":27}},{"start":{"line":56,"col":12},"end":{"line":56,"col":35}},{"start":{"line":65,"col":12},"end":{"line":65,"col":35}},{"start":{"line":78,"col":14},"end":{"line":78,"col":37}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 56, characters 12-35:"}
{"sample_id":224,"reply":{"class":"return","value":[{"start":{"line":101,"col":4},"end":{"line":101,"col":5}},{"start":{"line":101,"col":11},"end":{"line":101,"col":12}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 101, characters 11-12:"}
{"sample_id":223,"reply":{"class":"return","value":[{"start":{"line":7,"col":10},"end":{"line":7,"col":14}},{"start":{"line":11,"col":10},"end":{"line":11,"col":14}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 11, characters 10-14:"}
{"sample_id":222,"reply":{"class":"return","value":[{"start":{"line":64,"col":14},"end":{"line":64,"col":19}},{"start":{"line":68,"col":41},"end":{"line":68,"col":46}}],"notifications":[],"timing":{"clock":21,"cpu":20,"query":0,"pp":0,"reader":3,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 68, characters 41-46:"}
{"sample_id":221,"reply":{"class":"return","value":[{"start":{"line":71,"col":32},"end":{"line":71,"col":34}},{"start":{"line":72,"col":32},"end":{"line":72,"col":34}}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":3,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 72, characters 32-34:"}
{"sample_id":220,"reply":{"class":"return","value":[{"start":{"line":74,"col":25},"end":{"line":74,"col":27}},{"start":{"line":78,"col":78},"end":{"line":78,"col":80}},{"start":{"line":81,"col":29},"end":{"line":81,"col":31}},{"start":{"line":82,"col":32},"end":{"line":82,"col":34}}],"notifications":[],"timing":{"clock":19,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 81, characters 29-31:"}
{"sample_id":219,"reply":{"class":"return","value":[{"start":{"line":5,"col":0},"end":{"line":5,"col":73}},{"start":{"line":5,"col":0},"end":{"line":5,"col":73}},{"start":{"line":5,"col":0},"end":{"line":5,"col":73}},{"start":{"line":5,"col":0},"end":{"line":5,"col":73}},{"start":{"line":5,"col":17},"end":{"line":5,"col":26}},{"start":{"line":5,"col":27},"end":{"line":5,"col":39}},{"start":{"line":5,"col":40},"end":{"line":5,"col":53}},{"start":{"line":100,"col":6},"end":{"line":100,"col":8}}],"notifications":[],"timing":{"clock":32,"cpu":32,"query":1,"pp":0,"reader":1,"ppx":30,"typer":1,"error":0}},"loc":"File \"\", line 100, characters 6-8:"}
{"sample_id":216,"reply":{"class":"return","value":[{"start":{"line":40,"col":11},"end":{"line":40,"col":12},"type":"float","tail":"no"},{"start":{"line":40,"col":11},"end":{"line":40,"col":12},"type":"float","tail":"no"},{"start":{"line":40,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":28,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":25,"col":2},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":24,"col":11},"end":{"line":40,"col":13},"type":"('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":24,"col":4},"end":{"line":40,"col":13},"type":"state:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":64},"end":{"line":40,"col":13},"type":"input_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":49},"end":{"line":40,"col":13},"type":"?new_longident:'a ->\ninput_index:int ->\nstate:Random.State.t -> ('b * 'a option) array -> int * float","tail":"no"},{"start":{"line":23,"col":40},"end":{"line":40,"col":13},"type":"new_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":37},"end":{"line":40,"col":13},"type":"w:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":34},"end":{"line":40,"col":13},"type":"i:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":28},"end":{"line":40,"col":13},"type":"size:int ->\ni:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":4,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 23, characters 40-622:"}
{"sample_id":215,"reply":{"class":"return","value":[{"start":{"line":106,"col":20},"end":{"line":106,"col":32},"type":"(t * longident option) array","tail":"no"},{"start":{"line":106,"col":20},"end":{"line":106,"col":32},"type":"(t * longident option) array","tail":"no"},{"start":{"line":106,"col":6},"end":{"line":106,"col":32},"type":"(t * longident option) list","tail":"no"},{"start":{"line":105,"col":6},"end":{"line":106,"col":32},"type":"(t * longident option) list","tail":"no"},{"start":{"line":97,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":94,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":90,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":86,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":85,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 106, characters 6-32:"}
{"sample_id":214,"reply":{"class":"return","value":[{"start":{"line":28,"col":22},"end":{"line":28,"col":23},"type":"int -> int -> bool","tail":"no"},{"start":{"line":28,"col":10},"end":{"line":28,"col":25},"type":"bool","tail":"no"},{"start":{"line":28,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":25,"col":2},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":24,"col":11},"end":{"line":40,"col":13},"type":"('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":24,"col":4},"end":{"line":40,"col":13},"type":"state:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":64},"end":{"line":40,"col":13},"type":"input_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":49},"end":{"line":40,"col":13},"type":"?new_longident:'a ->\ninput_index:int ->\nstate:Random.State.t -> ('b * 'a option) array -> int * float","tail":"no"},{"start":{"line":23,"col":40},"end":{"line":40,"col":13},"type":"new_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":37},"end":{"line":40,"col":13},"type":"w:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":34},"end":{"line":40,"col":13},"type":"i:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":28},"end":{"line":40,"col":13},"type":"size:int ->\ni:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 28, characters 22-23:"}
{"sample_id":213,"reply":{"class":"return","value":[{"start":{"line":92,"col":42},"end":{"line":92,"col":51},"type":"float","tail":"no"},{"start":{"line":92,"col":42},"end":{"line":92,"col":51},"type":"float","tail":"no"},{"start":{"line":92,"col":35},"end":{"line":92,"col":52},"type":"float","tail":"no"},{"start":{"line":92,"col":31},"end":{"line":92,"col":52},"type":"float","tail":"no"},{"start":{"line":92,"col":21},"end":{"line":92,"col":53},"type":"float","tail":"no"},{"start":{"line":92,"col":8},"end":{"line":92,"col":53},"type":"int","tail":"no"},{"start":{"line":92,"col":4},"end":{"line":92,"col":53},"type":"int","tail":"no"},{"start":{"line":92,"col":4},"end":{"line":92,"col":57},"type":"int","tail":"no"},{"start":{"line":91,"col":4},"end":{"line":92,"col":57},"type":"int","tail":"no"},{"start":{"line":90,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":86,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":85,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 92, characters 42-51:"}
{"sample_id":212,"reply":{"class":"return","value":[{"start":{"line":31,"col":44},"end":{"line":31,"col":45},"type":"float","tail":"no"},{"start":{"line":31,"col":44},"end":{"line":31,"col":45},"type":"float","tail":"no"},{"start":{"line":31,"col":37},"end":{"line":31,"col":46},"type":"float","tail":"no"},{"start":{"line":31,"col":33},"end":{"line":31,"col":46},"type":"float","tail":"no"},{"start":{"line":31,"col":23},"end":{"line":31,"col":47},"type":"float","tail":"no"},{"start":{"line":31,"col":10},"end":{"line":31,"col":47},"type":"int","tail":"no"},{"start":{"line":31,"col":6},"end":{"line":31,"col":47},"type":"int","tail":"no"},{"start":{"line":31,"col":6},"end":{"line":31,"col":51},"type":"int","tail":"no"},{"start":{"line":30,"col":6},"end":{"line":31,"col":51},"type":"int","tail":"no"},{"start":{"line":29,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":28,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":25,"col":2},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":24,"col":11},"end":{"line":40,"col":13},"type":"('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":24,"col":4},"end":{"line":40,"col":13},"type":"state:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":64},"end":{"line":40,"col":13},"type":"input_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":49},"end":{"line":40,"col":13},"type":"?new_longident:'a ->\ninput_index:int ->\nstate:Random.State.t -> ('b * 'a option) array -> int * float","tail":"no"},{"start":{"line":23,"col":40},"end":{"line":40,"col":13},"type":"new_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":37},"end":{"line":40,"col":13},"type":"w:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":34},"end":{"line":40,"col":13},"type":"i:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":28},"end":{"line":40,"col":13},"type":"size:int ->\ni:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 31, characters 33-46:"}
{"sample_id":211,"reply":{"class":"return","value":[{"start":{"line":69,"col":13},"end":{"line":69,"col":29},"type":"expression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":69,"col":13},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":63,"col":8},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":27},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":25},"end":{"line":69,"col":52},"type":"expression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":25},"end":{"line":69,"col":52},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nexpression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":6},"end":{"line":69,"col":52},"type":"expression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":2,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 69, characters 13-29:"}
{"sample_id":210,"reply":{"class":"return","value":[{"start":{"line":31,"col":37},"end":{"line":31,"col":46},"type":"float","tail":"no"},{"start":{"line":31,"col":33},"end":{"line":31,"col":46},"type":"float","tail":"no"},{"start":{"line":31,"col":23},"end":{"line":31,"col":47},"type":"float","tail":"no"},{"start":{"line":31,"col":10},"end":{"line":31,"col":47},"type":"int","tail":"no"},{"start":{"line":31,"col":6},"end":{"line":31,"col":47},"type":"int","tail":"no"},{"start":{"line":31,"col":6},"end":{"line":31,"col":51},"type":"int","tail":"no"},{"start":{"line":30,"col":6},"end":{"line":31,"col":51},"type":"int","tail":"no"},{"start":{"line":29,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":28,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":25,"col":2},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":24,"col":11},"end":{"line":40,"col":13},"type":"('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":24,"col":4},"end":{"line":40,"col":13},"type":"state:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":64},"end":{"line":40,"col":13},"type":"input_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":49},"end":{"line":40,"col":13},"type":"?new_longident:'a ->\ninput_index:int ->\nstate:Random.State.t -> ('b * 'a option) array -> int * float","tail":"no"},{"start":{"line":23,"col":40},"end":{"line":40,"col":13},"type":"new_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":37},"end":{"line":40,"col":13},"type":"w:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":34},"end":{"line":40,"col":13},"type":"i:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":28},"end":{"line":40,"col":13},"type":"size:int ->\ni:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 31, characters 23-47:"}
{"sample_id":209,"reply":{"class":"return","value":[{"start":{"line":85,"col":39},"end":{"line":85,"col":43},"type":"'a option","tail":"no"},{"start":{"line":85,"col":39},"end":{"line":85,"col":43},"type":"longident option","tail":"no"},{"start":{"line":85,"col":23},"end":{"line":85,"col":44},"type":"t * longident option","tail":"no"},{"start":{"line":85,"col":10},"end":{"line":85,"col":44},"type":"(t * longident option) array","tail":"no"},{"start":{"line":85,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 85, characters 39-43:"}
{"sample_id":208,"reply":{"class":"return","value":[{"start":{"line":75,"col":36},"end":{"line":75,"col":41},"type":"corr_node list","tail":"no"},{"start":{"line":75,"col":36},"end":{"line":75,"col":41},"type":"corr_node list","tail":"no"},{"start":{"line":75,"col":15},"end":{"line":75,"col":41},"type":"bool","tail":"no"},{"start":{"line":75,"col":14},"end":{"line":75,"col":62},"type":"bool * bool * pattern_desc","tail":"no"},{"start":{"line":75,"col":8},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":24},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\npattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":6},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 15-41:"}
{"sample_id":207,"reply":{"class":"return","value":[{"start":{"line":68,"col":55},"end":{"line":68,"col":60},"type":"bool","tail":"no"},{"start":{"line":68,"col":55},"end":{"line":68,"col":60},"type":"bool","tail":"no"},{"start":{"line":68,"col":29},"end":{"line":68,"col":61},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":68,"col":10},"end":{"line":68,"col":61},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":64,"col":10},"end":{"line":68,"col":61},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":63,"col":8},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":27},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":25},"end":{"line":69,"col":52},"type":"expression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":25},"end":{"line":69,"col":52},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nexpression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":6},"end":{"line":69,"col":52},"type":"expression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 68, characters 55-60:"}
{"sample_id":206,"reply":{"class":"return","value":[{"start":{"line":37,"col":22},"end":{"line":37,"col":24},"type":"float -> float -> float","tail":"no"},{"start":{"line":37,"col":15},"end":{"line":37,"col":43},"type":"float","tail":"no"},{"start":{"line":37,"col":11},"end":{"line":37,"col":43},"type":"float","tail":"no"},{"start":{"line":37,"col":6},"end":{"line":37,"col":43},"type":"float","tail":"no"},{"start":{"line":36,"col":6},"end":{"line":37,"col":43},"type":"float","tail":"no"},{"start":{"line":35,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":34,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":33,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":29,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":28,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":25,"col":2},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":24,"col":11},"end":{"line":40,"col":13},"type":"('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":24,"col":4},"end":{"line":40,"col":13},"type":"state:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":64},"end":{"line":40,"col":13},"type":"input_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":49},"end":{"line":40,"col":13},"type":"?new_longident:'a ->\ninput_index:int ->\nstate:Random.State.t -> ('b * 'a option) array -> int * float","tail":"no"},{"start":{"line":23,"col":40},"end":{"line":40,"col":13},"type":"new_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":37},"end":{"line":40,"col":13},"type":"w:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":34},"end":{"line":40,"col":13},"type":"i:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":28},"end":{"line":40,"col":13},"type":"size:int ->\ni:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 37, characters 22-24:"}
{"sample_id":205,"reply":{"class":"return","value":[{"start":{"line":72,"col":39},"end":{"line":72,"col":40},"type":"int","tail":"no"},{"start":{"line":72,"col":39},"end":{"line":72,"col":40},"type":"int","tail":"no"},{"start":{"line":72,"col":31},"end":{"line":72,"col":50},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":72,"col":8},"end":{"line":72,"col":50},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":71,"col":31},"end":{"line":72,"col":50},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":71,"col":28},"end":{"line":72,"col":50},"type":"value_binding ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":71,"col":28},"end":{"line":72,"col":50},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nvalue_binding ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":71,"col":6},"end":{"line":72,"col":50},"type":"value_binding ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":5,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 72, characters 39-40:"}
{"sample_id":204,"reply":{"class":"return","value":[{"start":{"line":14,"col":28},"end":{"line":14,"col":35},"type":"int","tail":"no"},{"start":{"line":14,"col":24},"end":{"line":14,"col":35},"type":"int","tail":"no"},{"start":{"line":14,"col":9},"end":{"line":14,"col":35},"type":"int","tail":"no"},{"start":{"line":14,"col":8},"end":{"line":14,"col":50},"type":"int * int","tail":"no"},{"start":{"line":13,"col":8},"end":{"line":14,"col":50},"type":"int * int","tail":"no"},{"start":{"line":11,"col":4},"end":{"line":17,"col":54},"type":"int * int","tail":"no"},{"start":{"line":10,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":9,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":8,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":7,"col":19},"end":{"line":19,"col":37},"type":"t -> unit","tail":"no"},{"start":{"line":7,"col":15},"end":{"line":19,"col":37},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":7,"col":10},"end":{"line":19,"col":37},"type":"side -> Format.formatter -> t -> unit","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":3,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 14, characters 24-35:"}
{"sample_id":203,"reply":{"class":"return","value":[{"start":{"line":81,"col":54},"end":{"line":81,"col":59},"type":"bool","tail":"no"},{"start":{"line":81,"col":54},"end":{"line":81,"col":59},"type":"bool","tail":"no"},{"start":{"line":81,"col":28},"end":{"line":81,"col":60},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":81,"col":12},"end":{"line":81,"col":60},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":77,"col":12},"end":{"line":81,"col":60},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":75,"col":8},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":24},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\npattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":6},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":3,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 77, characters 12-212:"}
{"sample_id":202,"reply":{"class":"return","value":[{"start":{"line":103,"col":42},"end":{"line":103,"col":54},"type":"(t * longident option) array","tail":"no"},{"start":{"line":103,"col":42},"end":{"line":103,"col":54},"type":"(t * longident option) array","tail":"no"},{"start":{"line":103,"col":42},"end":{"line":103,"col":58},"type":"t * longident option","tail":"no"},{"start":{"line":103,"col":32},"end":{"line":103,"col":59},"type":"int -> t * longident option","tail":"no"},{"start":{"line":103,"col":6},"end":{"line":103,"col":59},"type":"(t * longident option) list","tail":"no"},{"start":{"line":102,"col":6},"end":{"line":103,"col":59},"type":"(t * longident option) list","tail":"no"},{"start":{"line":97,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":94,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":90,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":86,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":85,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":1,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 103, characters 42-54:"}
{"sample_id":201,"reply":{"class":"return","value":[{"start":{"line":60,"col":27},"end":{"line":60,"col":32},"type":"bool","tail":"no"},{"start":{"line":60,"col":27},"end":{"line":60,"col":32},"type":"bool","tail":"no"},{"start":{"line":60,"col":13},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":54,"col":8},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":53,"col":10},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":28},"end":{"line":60,"col":33},"type":"Ppxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":28},"end":{"line":60,"col":33},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nPpxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":6},"end":{"line":60,"col":33},"type":"Ppxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":1,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 60, characters 27-32:"}
{"sample_id":200,"reply":{"class":"return","value":[{"start":{"line":72,"col":45},"end":{"line":72,"col":49},"type":"bool","tail":"no"},{"start":{"line":72,"col":45},"end":{"line":72,"col":49},"type":"bool","tail":"no"},{"start":{"line":72,"col":31},"end":{"line":72,"col":50},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":72,"col":8},"end":{"line":72,"col":50},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":71,"col":31},"end":{"line":72,"col":50},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":71,"col":28},"end":{"line":72,"col":50},"type":"value_binding ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":71,"col":28},"end":{"line":72,"col":50},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nvalue_binding ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":71,"col":6},"end":{"line":72,"col":50},"type":"value_binding ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":2,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 71, characters 28-100:"}
{"sample_id":199,"reply":{"class":"return","value":[{"start":{"line":17,"col":38},"end":{"line":17,"col":39},"type":"int","tail":"no"},{"start":{"line":17,"col":9},"end":{"line":17,"col":39},"type":"int","tail":"no"},{"start":{"line":17,"col":8},"end":{"line":17,"col":54},"type":"int * int","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":17,"col":54},"type":"int * int","tail":"no"},{"start":{"line":11,"col":4},"end":{"line":17,"col":54},"type":"int * int","tail":"no"},{"start":{"line":10,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":9,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":8,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":7,"col":19},"end":{"line":19,"col":37},"type":"t -> unit","tail":"no"},{"start":{"line":7,"col":15},"end":{"line":19,"col":37},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":7,"col":10},"end":{"line":19,"col":37},"type":"side -> Format.formatter -> t -> unit","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 38-39:"}
{"sample_id":198,"reply":{"class":"return","value":[{"start":{"line":82,"col":45},"end":{"line":82,"col":50},"type":"bool","tail":"no"},{"start":{"line":82,"col":45},"end":{"line":82,"col":50},"type":"bool","tail":"no"},{"start":{"line":82,"col":31},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":82,"col":15},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":75,"col":8},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":24},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\npattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":6},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":2,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 82, characters 31-51:"}
{"sample_id":197,"reply":{"class":"return","value":[{"start":{"line":59,"col":19},"end":{"line":59,"col":20},"type":"(t * longident option) array","tail":"no"},{"start":{"line":59,"col":19},"end":{"line":59,"col":20},"type":"(t * longident option) array","tail":"no"},{"start":{"line":59,"col":10},"end":{"line":59,"col":42},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":55,"col":10},"end":{"line":59,"col":42},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":54,"col":8},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":53,"col":10},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":28},"end":{"line":60,"col":33},"type":"Ppxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":28},"end":{"line":60,"col":33},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nPpxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":6},"end":{"line":60,"col":33},"type":"Ppxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":2,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 59, characters 19-20:"}
{"sample_id":196,"reply":{"class":"return","value":[{"start":{"line":36,"col":14},"end":{"line":36,"col":32},"type":"Random.State.t -> float -> float","tail":"no"},{"start":{"line":36,"col":14},"end":{"line":36,"col":32},"type":"Random.State.t -> float -> float","tail":"no"},{"start":{"line":36,"col":14},"end":{"line":36,"col":42},"type":"float","tail":"no"},{"start":{"line":36,"col":6},"end":{"line":37,"col":43},"type":"float","tail":"no"},{"start":{"line":35,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":34,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":33,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":29,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":28,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":25,"col":2},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":24,"col":11},"end":{"line":40,"col":13},"type":"('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":24,"col":4},"end":{"line":40,"col":13},"type":"state:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":64},"end":{"line":40,"col":13},"type":"input_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":49},"end":{"line":40,"col":13},"type":"?new_longident:'a ->\ninput_index:int ->\nstate:Random.State.t -> ('b * 'a option) array -> int * float","tail":"no"},{"start":{"line":23,"col":40},"end":{"line":40,"col":13},"type":"new_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":37},"end":{"line":40,"col":13},"type":"w:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":34},"end":{"line":40,"col":13},"type":"i:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":28},"end":{"line":40,"col":13},"type":"size:int ->\ni:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 36, characters 14-32:"}
{"sample_id":195,"reply":{"class":"return","value":[{"start":{"line":40,"col":11},"end":{"line":40,"col":12},"type":"float","tail":"no"},{"start":{"line":40,"col":11},"end":{"line":40,"col":12},"type":"float","tail":"no"},{"start":{"line":40,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":28,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":25,"col":2},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":24,"col":11},"end":{"line":40,"col":13},"type":"('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":24,"col":4},"end":{"line":40,"col":13},"type":"state:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":64},"end":{"line":40,"col":13},"type":"input_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":49},"end":{"line":40,"col":13},"type":"?new_longident:'a ->\ninput_index:int ->\nstate:Random.State.t -> ('b * 'a option) array -> int * float","tail":"no"},{"start":{"line":23,"col":40},"end":{"line":40,"col":13},"type":"new_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":37},"end":{"line":40,"col":13},"type":"w:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":34},"end":{"line":40,"col":13},"type":"i:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":28},"end":{"line":40,"col":13},"type":"size:int ->\ni:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 23, characters 37-622:"}
{"sample_id":194,"reply":{"class":"return","value":[{"start":{"line":31,"col":44},"end":{"line":31,"col":45},"type":"float","tail":"no"},{"start":{"line":31,"col":44},"end":{"line":31,"col":45},"type":"float","tail":"no"},{"start":{"line":31,"col":37},"end":{"line":31,"col":46},"type":"float","tail":"no"},{"start":{"line":31,"col":33},"end":{"line":31,"col":46},"type":"float","tail":"no"},{"start":{"line":31,"col":23},"end":{"line":31,"col":47},"type":"float","tail":"no"},{"start":{"line":31,"col":10},"end":{"line":31,"col":47},"type":"int","tail":"no"},{"start":{"line":31,"col":6},"end":{"line":31,"col":47},"type":"int","tail":"no"},{"start":{"line":31,"col":6},"end":{"line":31,"col":51},"type":"int","tail":"no"},{"start":{"line":30,"col":6},"end":{"line":31,"col":51},"type":"int","tail":"no"},{"start":{"line":29,"col":4},"end":{"line":39,"col":18},"type":"int * float","tail":"no"},{"start":{"line":28,"col":7},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":25,"col":2},"end":{"line":40,"col":13},"type":"int * float","tail":"no"},{"start":{"line":24,"col":11},"end":{"line":40,"col":13},"type":"('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":24,"col":4},"end":{"line":40,"col":13},"type":"state:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":64},"end":{"line":40,"col":13},"type":"input_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":49},"end":{"line":40,"col":13},"type":"?new_longident:'a ->\ninput_index:int ->\nstate:Random.State.t -> ('b * 'a option) array -> int * float","tail":"no"},{"start":{"line":23,"col":40},"end":{"line":40,"col":13},"type":"new_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":37},"end":{"line":40,"col":13},"type":"w:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":34},"end":{"line":40,"col":13},"type":"i:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"},{"start":{"line":23,"col":28},"end":{"line":40,"col":13},"type":"size:int ->\ni:int ->\nw:float ->\nnew_loc:'a ->\n?new_longident:'b ->\ninput_index:int ->\nstate:Random.State.t -> ('a * 'b option) array -> int * float","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":3,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 31, characters 37-46:"}
{"sample_id":193,"reply":{"class":"return","value":[{"start":{"line":69,"col":40},"end":{"line":69,"col":41},"type":"int","tail":"no"},{"start":{"line":69,"col":40},"end":{"line":69,"col":41},"type":"int","tail":"no"},{"start":{"line":69,"col":32},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":69,"col":13},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":63,"col":8},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":27},"end":{"line":69,"col":52},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":25},"end":{"line":69,"col":52},"type":"expression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":25},"end":{"line":69,"col":52},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nexpression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":62,"col":6},"end":{"line":69,"col":52},"type":"expression ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 69, characters 40-41:"}
{"sample_id":192,"reply":{"class":"return","value":[{"start":{"line":19,"col":34},"end":{"line":19,"col":37},"type":"int","tail":"no"},{"start":{"line":19,"col":34},"end":{"line":19,"col":37},"type":"int","tail":"no"},{"start":{"line":19,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":10,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":9,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":8,"col":2},"end":{"line":19,"col":37},"type":"unit","tail":"no"},{"start":{"line":7,"col":19},"end":{"line":19,"col":37},"type":"t -> unit","tail":"no"},{"start":{"line":7,"col":15},"end":{"line":19,"col":37},"type":"Format.formatter -> t -> unit","tail":"no"},{"start":{"line":7,"col":10},"end":{"line":19,"col":37},"type":"side -> Format.formatter -> t -> unit","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 9, characters 2-303:"}
{"sample_id":191,"reply":{"class":"return","value":[{"start":{"line":81,"col":34},"end":{"line":81,"col":35},"type":"int","tail":"no"},{"start":{"line":81,"col":29},"end":{"line":81,"col":35},"type":"int","tail":"no"},{"start":{"line":81,"col":28},"end":{"line":81,"col":60},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":81,"col":12},"end":{"line":81,"col":60},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":77,"col":12},"end":{"line":81,"col":60},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":75,"col":8},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":24},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\npattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":6},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":1,"pp":0,"reader":3,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 81, characters 34-35:"}
{"sample_id":190,"reply":{"class":"return","value":[{"start":{"line":60,"col":27},"end":{"line":60,"col":32},"type":"bool","tail":"no"},{"start":{"line":60,"col":27},"end":{"line":60,"col":32},"type":"bool","tail":"no"},{"start":{"line":60,"col":13},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":54,"col":8},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":53,"col":10},"end":{"line":60,"col":33},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":28},"end":{"line":60,"col":33},"type":"Ppxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":28},"end":{"line":60,"col":33},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\nPpxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":52,"col":6},"end":{"line":60,"col":33},"type":"Ppxlib_ast__Ast.longident_loc ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":1,"pp":0,"reader":0,"ppx":18,"typer":4,"error":0}},"loc":"File \"\", line 52, characters 28-372:"}
{"sample_id":189,"reply":{"class":"return","value":[{"start":{"line":75,"col":36},"end":{"line":75,"col":41},"type":"corr_node list","tail":"no"},{"start":{"line":75,"col":36},"end":{"line":75,"col":41},"type":"corr_node list","tail":"no"},{"start":{"line":75,"col":15},"end":{"line":75,"col":41},"type":"bool","tail":"no"},{"start":{"line":75,"col":14},"end":{"line":75,"col":62},"type":"bool * bool * pattern_desc","tail":"no"},{"start":{"line":75,"col":8},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":24},"end":{"line":82,"col":51},"type":"int * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":22},"end":{"line":82,"col":51},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold ->\npattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":74,"col":6},"end":{"line":82,"col":51},"type":"pattern ->\nint * (t * longident option) array * int * float * bool ->\nint * (t * longident option) array * int * float * bool","tail":"no"},{"start":{"line":46,"col":4},"end":{"line":83,"col":7},"type":"(int * (t * longident option) array * int * float * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":2,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 36-41:"}
{"sample_id":188,"reply":{"class":"return","value":[{"start":{"line":92,"col":22},"end":{"line":92,"col":25},"type":"float -> float","tail":"no"},{"start":{"line":92,"col":22},"end":{"line":92,"col":25},"type":"float -> float","tail":"no"},{"start":{"line":92,"col":22},"end":{"line":92,"col":27},"type":"float","tail":"no"},{"start":{"line":92,"col":21},"end":{"line":92,"col":53},"type":"float","tail":"no"},{"start":{"line":92,"col":8},"end":{"line":92,"col":53},"type":"int","tail":"no"},{"start":{"line":92,"col":4},"end":{"line":92,"col":53},"type":"int","tail":"no"},{"start":{"line":92,"col":4},"end":{"line":92,"col":57},"type":"int","tail":"no"},{"start":{"line":91,"col":4},"end":{"line":92,"col":57},"type":"int","tail":"no"},{"start":{"line":90,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":86,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":85,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":45,"col":2},"end":{"line":107,"col":44},"type":"(t * longident option) list","tail":"no"},{"start":{"line":42,"col":39},"end":{"line":107,"col":44},"type":"Ppxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":32},"end":{"line":107,"col":44},"type":"nodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":25},"end":{"line":107,"col":44},"type":"state:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"},{"start":{"line":42,"col":22},"end":{"line":107,"col":44},"type":"k:int ->\nstate:Random.State.t ->\nnodes:corr_node list ->\nPpxlib_ast__Ast.structure -> (t * longident option) list","tail":"no"}],"notifications":[],"timing":{"clock":51,"cpu":51,"query":28,"pp":0,"reader":0,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 92, characters 22-25:"}
{"sample_id":185,"reply":{"class":"return","value":[{"start":{"line":21,"col":33},"end":{"line":21,"col":37}},"(match \"%a\" with | \"\" -> _ | _ -> _)"],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":2,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 21, characters 33-37:"}
{"sample_id":184,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: float","notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 92, characters 31-52:"}
{"sample_id":183,"reply":{"class":"return","value":[{"start":{"line":25,"col":19},"end":{"line":25,"col":23}},"(match size with | 0 -> _ | _ -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 25, characters 19-23:"}
{"sample_id":182,"reply":{"class":"return","value":[{"start":{"line":82,"col":39},"end":{"line":82,"col":40}},"(match i with | 0 -> _ | _ -> _)"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 82, characters 39-40:"}
{"sample_id":181,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: t","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 30, characters 33-38:"}
{"sample_id":180,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":22,"cpu":21,"query":0,"pp":0,"reader":1,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 101, characters 13-15:"}
{"sample_id":179,"reply":{"class":"return","value":[{"start":{"line":28,"col":24},"end":{"line":28,"col":25}},"(match i with | 0 -> _ | _ -> _)"],"notifications":[],"timing":{"clock":17,"cpu":16,"query":0,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 28, characters 24-25:"}
{"sample_id":178,"reply":{"class":"return","value":[{"start":{"line":75,"col":15},"end":{"line":75,"col":41}},"(match List.mem Var_pattern nodes with | false -> _ | true -> _)"],"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":4,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 15-41:"}
{"sample_id":177,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 68, characters 33-34:"}
{"sample_id":176,"reply":{"class":"return","value":[{"start":{"line":62,"col":27},"end":{"line":62,"col":47}},"(0, a, i, w, in_vb) | (_, a, i, w, in_vb)"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 62, characters 28-30:"}
{"sample_id":175,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":1,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 34, characters 40-47:"}
{"sample_id":174,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: t","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 66, characters 31-36:"}
{"sample_id":173,"reply":{"class":"return","value":[{"start":{"line":14,"col":8},"end":{"line":14,"col":50}},"(match ((pos.pos_cnum - pos.pos_bol), (pos.pos_lnum)) with | (_, _) -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 14, characters 8-50:"}
{"sample_id":172,"reply":{"class":"return","value":[{"start":{"line":69,"col":13},"end":{"line":69,"col":52}},"(match super#expression e (nb, a, i, w, in_vb) with | (_, _, _, _, _) -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 69, characters 13-52:"}
{"sample_id":171,"reply":{"class":"return","value":[{"start":{"line":92,"col":4},"end":{"line":92,"col":53}},"(match k + (int_of_float ((log r) /. (log (1. -. initial_w)))) with\n| 0 -> _\n| _ -> _)"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 92, characters 4-53:"}
{"sample_id":170,"reply":{"class":"return","value":[{"start":{"line":55,"col":10},"end":{"line":59,"col":42}},"(match let (new_i, new_w) =\n        update_reservoir_sample ~size:k ~i ~w ~new_loc\n          ?new_longident:(Some new_longident) ~input_index:nb ~state a in\n      ((nb + 1), a, new_i, new_w, in_vb)\nwith\n| (_, _, _, _, _) -> _)"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 55, characters 10-197:"}
{"sample_id":169,"reply":{"class":"error","value":"Destruct not allowed on value_binding","notifications":[],"timing":{"clock":33,"cpu":32,"query":0,"pp":0,"reader":3,"ppx":28,"typer":0,"error":0}},"loc":"File \"\", line 64, characters 14-19:"}
{"sample_id":168,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":0,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 17, characters 22-23:"}
{"sample_id":167,"reply":{"class":"return","value":[{"start":{"line":72,"col":45},"end":{"line":72,"col":49}},"(match true with | false -> _ | true -> _)"],"notifications":[],"timing":{"clock":21,"cpu":21,"query":5,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 72, characters 45-49:"}
{"sample_id":166,"reply":{"class":"return","value":[{"start":{"line":101,"col":16},"end":{"line":101,"col":17}},"(match k with | 0 -> _ | _ -> _)"],"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":5,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 101, characters 16-17:"}
{"sample_id":165,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":1,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 33, characters 23-39:"}
{"sample_id":164,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":1,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 21, characters 17-32:"}
{"sample_id":163,"reply":{"class":"return","value":[{"start":{"line":31,"col":6},"end":{"line":31,"col":51}},"match (i + (int_of_float ((log r) /. (log (1. -. w))))) + 1 with\n| 0 -> _\n| _ -> _"],"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":1,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 31, characters 6-51:"}
{"sample_id":162,"reply":{"class":"return","value":[{"start":{"line":63,"col":20},"end":{"line":63,"col":30}},"(match Expression with | Longident -> _ | Expression -> _ | Var_pattern -> _)"],"notifications":[],"timing":{"clock":47,"cpu":47,"query":26,"pp":0,"reader":2,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 63, characters 20-30:"}
{"sample_id":161,"reply":{"class":"return","value":[{"start":{"line":95,"col":26},"end":{"line":95,"col":27}},"(match 0 with | 0 -> _ | _ -> _)"],"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 95, characters 26-27:"}
{"sample_id":160,"reply":{"class":"return","value":[{"start":{"line":72,"col":8},"end":{"line":72,"col":50}},"(match super#value_binding vb (nb, a, i, w, true) with | (_, _, _, _, _) -> _)"],"notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":1,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 72, characters 8-50:"}
{"sample_id":159,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":25,"cpu":25,"query":0,"pp":0,"reader":2,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 37, characters 25-37:"}
{"sample_id":158,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: array","notifications":[],"timing":{"clock":24,"cpu":23,"query":1,"pp":0,"reader":1,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 68, characters 38-39:"}
{"sample_id":157,"reply":{"class":"return","value":[{"start":{"line":82,"col":15},"end":{"line":82,"col":51}},"(match super#pattern p (nb, a, i, w, false) with | (_, _, _, _, _) -> _)"],"notifications":[],"timing":{"clock":24,"cpu":23,"query":0,"pp":0,"reader":1,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 82, characters 15-51:"}
{"sample_id":154,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":92,"col":0}},"notifications":[],"timing":{"clock":42,"cpu":41,"query":1,"pp":0,"reader":10,"ppx":31,"typer":0,"error":0}},"loc":"File \"\", line 31, characters 8-9:"}
{"sample_id":153,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":7,"col":15}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 17-20:"}
{"sample_id":152,"reply":{"class":"return","value":"Not in environment ''","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 37, characters 22-24:"}
{"sample_id":151,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":62,"col":41}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 69, characters 46-51:"}
{"sample_id":150,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":5,"col":0}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 54, characters 20-29:"}
{"sample_id":149,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":86,"col":6}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 95, characters 42-51:"}
{"sample_id":148,"reply":{"class":"return","value":"\"float\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[],"timing":{"clock":27,"cpu":27,"query":0,"pp":0,"reader":1,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 48, characters 65-70:"}
{"sample_id":147,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":42,"col":23}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 85, characters 21-22:"}
{"sample_id":146,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":91,"col":8}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 92, characters 26-27:"}
{"sample_id":145,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":85,"col":6}},"notifications":[],"timing":{"clock":27,"cpu":27,"query":0,"pp":0,"reader":6,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 95, characters 29-30:"}
{"sample_id":144,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":42,"col":26}},"notifications":[],"timing":{"clock":29,"cpu":29,"query":0,"pp":0,"reader":6,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 66, characters 31-36:"}
{"sample_id":143,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":489,"col":4}},"notifications":[],"timing":{"clock":27,"cpu":27,"query":0,"pp":0,"reader":6,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 105, characters 15-28:"}
{"sample_id":142,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":7,"col":19}},"notifications":[],"timing":{"clock":19,"cpu":18,"query":0,"pp":0,"reader":0,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 18-21:"}
{"sample_id":141,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":173,"col":0}},"notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":4,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 37, characters 25-37:"}
{"sample_id":140,"reply":{"class":"return","value":"\"false\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[],"timing":{"clock":28,"cpu":27,"query":0,"pp":0,"reader":2,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 95, characters 53-58:"}
{"sample_id":139,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":74,"col":22}},"notifications":[],"timing":{"clock":27,"cpu":26,"query":0,"pp":0,"reader":2,"ppx":24,"typer":0,"error":0}},"loc":"File \"\", line 82, characters 29-30:"}
{"sample_id":138,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":489,"col":4}},"notifications":[],"timing":{"clock":23,"cpu":22,"query":0,"pp":0,"reader":2,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 102, characters 15-28:"}
{"sample_id":137,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":21,"col":11}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":0,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 21, characters 53-56:"}
{"sample_id":136,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":74,"col":32}},"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":0,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 78, characters 47-48:"}
{"sample_id":135,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":47,"col":6}},"notifications":[],"timing":{"clock":25,"cpu":25,"query":1,"pp":0,"reader":1,"ppx":23,"typer":0,"error":0}},"loc":"File \"\", line 81, characters 12-17:"}
{"sample_id":134,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":5,"col":0}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":2,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 63, characters 20-30:"}
{"sample_id":133,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":92,"col":0}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 31, characters 48-49:"}
{"sample_id":132,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":23,"col":4}},"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":1,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 56, characters 12-35:"}
{"sample_id":131,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":101,"col":4}},"notifications":[],"timing":{"clock":27,"cpu":27,"query":0,"pp":0,"reader":1,"ppx":26,"typer":0,"error":0}},"loc":"File \"\", line 101, characters 11-12:"}
{"sample_id":130,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":7,"col":10}},"notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":5,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 11, characters 10-14:"}
{"sample_id":129,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":64,"col":14}},"notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":5,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 68, characters 41-46:"}
{"sample_id":128,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":71,"col":32}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 72, characters 32-34:"}
{"sample_id":127,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":74,"col":25}},"notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":1,"ppx":25,"typer":0,"error":0}},"loc":"File \"\", line 81, characters 29-31:"}
{"sample_id":126,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":22,"cpu":22,"query":0,"pp":0,"reader":1,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 100, characters 6-8:"}
{"sample_id":123,"reply":{"class":"return","value":[{"start":{"line":70,"col":6},"end":{"line":70,"col":8}},{"start":{"line":78,"col":44},"end":{"line":78,"col":45}},{"start":{"line":92,"col":4},"end":{"line":92,"col":6}},{"start":{"line":118,"col":10},"end":{"line":118,"col":12}},{"start":{"line":147,"col":49},"end":{"line":147,"col":50}},{"start":{"line":157,"col":6},"end":{"line":157,"col":8}},{"start":{"line":157,"col":16},"end":{"line":157,"col":17}},{"start":{"line":160,"col":4},"end":{"line":160,"col":6}},{"start":{"line":177,"col":17},"end":{"line":177,"col":19}},{"start":{"line":178,"col":12},"end":{"line":178,"col":14}},{"start":{"line":181,"col":32},"end":{"line":181,"col":33}},{"start":{"line":183,"col":18},"end":{"line":183,"col":20}},{"start":{"line":195,"col":77},"end":{"line":195,"col":78}},{"start":{"line":207,"col":64},"end":{"line":207,"col":65}},{"start":{"line":219,"col":40},"end":{"line":219,"col":41}},{"start":{"line":231,"col":39},"end":{"line":231,"col":40}},{"start":{"line":234,"col":57},"end":{"line":234,"col":58}},{"start":{"line":259,"col":67},"end":{"line":259,"col":69}},{"start":{"line":259,"col":71},"end":{"line":259,"col":73}},{"start":{"line":277,"col":17},"end":{"line":277,"col":18}}],"notifications":[],"timing":{"clock":26,"cpu":26,"query":1,"pp":0,"reader":3,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 259, characters 67-69:"}
{"sample_id":122,"reply":{"class":"return","value":[{"start":{"line":70,"col":6},"end":{"line":70,"col":8}},{"start":{"line":78,"col":44},"end":{"line":78,"col":45}},{"start":{"line":92,"col":4},"end":{"line":92,"col":6}},{"start":{"line":118,"col":10},"end":{"line":118,"col":12}},{"start":{"line":147,"col":49},"end":{"line":147,"col":50}},{"start":{"line":157,"col":6},"end":{"line":157,"col":8}},{"start":{"line":157,"col":16},"end":{"line":157,"col":17}},{"start":{"line":160,"col":4},"end":{"line":160,"col":6}},{"start":{"line":177,"col":17},"end":{"line":177,"col":19}},{"start":{"line":178,"col":12},"end":{"line":178,"col":14}},{"start":{"line":181,"col":32},"end":{"line":181,"col":33}},{"start":{"line":183,"col":18},"end":{"line":183,"col":20}},{"start":{"line":195,"col":77},"end":{"line":195,"col":78}},{"start":{"line":207,"col":64},"end":{"line":207,"col":65}},{"start":{"line":219,"col":40},"end":{"line":219,"col":41}},{"start":{"line":231,"col":39},"end":{"line":231,"col":40}},{"start":{"line":234,"col":57},"end":{"line":234,"col":58}},{"start":{"line":259,"col":67},"end":{"line":259,"col":69}},{"start":{"line":259,"col":71},"end":{"line":259,"col":73}},{"start":{"line":277,"col":17},"end":{"line":277,"col":18}}],"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":2,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 177, characters 17-19:"}
{"sample_id":121,"reply":{"class":"return","value":[{"start":{"line":36,"col":51},"end":{"line":36,"col":64}},{"start":{"line":58,"col":49},"end":{"line":58,"col":62}}],"notifications":[],"timing":{"clock":19,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 58, characters 49-62:"}
{"sample_id":120,"reply":{"class":"return","value":[{"start":{"line":73,"col":12},"end":{"line":73,"col":23}},{"start":{"line":74,"col":37},"end":{"line":74,"col":48}},{"start":{"line":75,"col":34},"end":{"line":75,"col":45}}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":3,"pp":0,"reader":4,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 34-45:"}
{"sample_id":119,"reply":{"class":"return","value":[{"start":{"line":15,"col":21},"end":{"line":15,"col":22}},{"start":{"line":18,"col":22},"end":{"line":18,"col":23}}],"notifications":[],"timing":{"clock":27,"cpu":27,"query":3,"pp":0,"reader":4,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 21-22:"}
{"sample_id":118,"reply":{"class":"return","value":[{"start":{"line":85,"col":34},"end":{"line":85,"col":45}}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":2,"pp":0,"reader":3,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 85, characters 34-45:"}
{"sample_id":117,"reply":{"class":"return","value":[{"start":{"line":70,"col":6},"end":{"line":70,"col":8}},{"start":{"line":78,"col":44},"end":{"line":78,"col":45}},{"start":{"line":92,"col":4},"end":{"line":92,"col":6}},{"start":{"line":118,"col":10},"end":{"line":118,"col":12}},{"start":{"line":147,"col":49},"end":{"line":147,"col":50}},{"start":{"line":157,"col":6},"end":{"line":157,"col":8}},{"start":{"line":157,"col":16},"end":{"line":157,"col":17}},{"start":{"line":160,"col":4},"end":{"line":160,"col":6}},{"start":{"line":177,"col":17},"end":{"line":177,"col":19}},{"start":{"line":178,"col":12},"end":{"line":178,"col":14}},{"start":{"line":181,"col":32},"end":{"line":181,"col":33}},{"start":{"line":183,"col":18},"end":{"line":183,"col":20}},{"start":{"line":195,"col":77},"end":{"line":195,"col":78}},{"start":{"line":207,"col":64},"end":{"line":207,"col":65}},{"start":{"line":219,"col":40},"end":{"line":219,"col":41}},{"start":{"line":231,"col":39},"end":{"line":231,"col":40}},{"start":{"line":234,"col":57},"end":{"line":234,"col":58}},{"start":{"line":259,"col":67},"end":{"line":259,"col":69}},{"start":{"line":259,"col":71},"end":{"line":259,"col":73}},{"start":{"line":277,"col":17},"end":{"line":277,"col":18}}],"notifications":[],"timing":{"clock":41,"cpu":40,"query":1,"pp":0,"reader":2,"ppx":37,"typer":1,"error":0}},"loc":"File \"\", line 207, characters 41-65:"}
{"sample_id":116,"reply":{"class":"return","value":[{"start":{"line":73,"col":12},"end":{"line":73,"col":23}},{"start":{"line":74,"col":37},"end":{"line":74,"col":48}},{"start":{"line":75,"col":34},"end":{"line":75,"col":45}}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":1,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 74, characters 37-48:"}
{"sample_id":115,"reply":{"class":"return","value":[{"start":{"line":71,"col":8},"end":{"line":71,"col":10}},{"start":{"line":75,"col":46},"end":{"line":75,"col":48}},{"start":{"line":78,"col":31},"end":{"line":78,"col":45}},{"start":{"line":93,"col":12},"end":{"line":93,"col":14}},{"start":{"line":119,"col":19},"end":{"line":119,"col":21}},{"start":{"line":134,"col":37},"end":{"line":134,"col":39}},{"start":{"line":134,"col":63},"end":{"line":134,"col":65}},{"start":{"line":147,"col":31},"end":{"line":147,"col":50}},{"start":{"line":147,"col":41},"end":{"line":147,"col":50}},{"start":{"line":156,"col":50},"end":{"line":156,"col":52}},{"start":{"line":157,"col":11},"end":{"line":157,"col":17}},{"start":{"line":178,"col":39},"end":{"line":178,"col":41}},{"start":{"line":181,"col":8},"end":{"line":181,"col":33}},{"start":{"line":181,"col":19},"end":{"line":181,"col":33}},{"start":{"line":181,"col":25},"end":{"line":181,"col":33}},{"start":{"line":195,"col":56},"end":{"line":195,"col":78}},{"start":{"line":207,"col":18},"end":{"line":207,"col":65}},{"start":{"line":207,"col":41},"end":{"line":207,"col":65}},{"start":{"line":219,"col":18},"end":{"line":219,"col":41}},{"start":{"line":231,"col":18},"end":{"line":231,"col":40}},{"start":{"line":234,"col":6},"end":{"line":234,"col":58}},{"start":{"line":234,"col":14},"end":{"line":234,"col":58}},{"start":{"line":234,"col":29},"end":{"line":234,"col":58}},{"start":{"line":234,"col":45},"end":{"line":234,"col":58}},{"start":{"line":277,"col":9},"end":{"line":277,"col":18}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 134, characters 63-65:"}
{"sample_id":114,"reply":{"class":"return","value":[{"start":{"line":198,"col":10},"end":{"line":198,"col":13}},{"start":{"line":206,"col":8},"end":{"line":206,"col":11}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 206, characters 8-11:"}
{"sample_id":113,"reply":{"class":"return","value":[{"start":{"line":121,"col":37},"end":{"line":121,"col":49}},{"start":{"line":133,"col":56},"end":{"line":133,"col":68}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":2,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 133, characters 56-68:"}
{"sample_id":112,"reply":{"class":"return","value":[{"start":{"line":41,"col":15},"end":{"line":41,"col":21}},{"start":{"line":42,"col":35},"end":{"line":42,"col":41}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 42, characters 35-41:"}
{"sample_id":111,"reply":{"class":"return","value":[{"start":{"line":67,"col":6},"end":{"line":67,"col":18}},{"start":{"line":78,"col":31},"end":{"line":78,"col":43}},{"start":{"line":78,"col":46},"end":{"line":78,"col":58}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 78, characters 31-43:"}
{"sample_id":110,"reply":{"class":"return","value":[{"start":{"line":6,"col":4},"end":{"line":6,"col":13}},{"start":{"line":10,"col":24},"end":{"line":10,"col":33}},{"start":{"line":10,"col":42},"end":{"line":10,"col":51}},{"start":{"line":14,"col":17},"end":{"line":14,"col":26}},{"start":{"line":15,"col":23},"end":{"line":15,"col":32}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":1,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 10, characters 42-51:"}
{"sample_id":109,"reply":{"class":"return","value":[{"start":{"line":29,"col":37},"end":{"line":29,"col":56}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 29, characters 37-56:"}
{"sample_id":108,"reply":{"class":"return","value":[{"start":{"line":68,"col":35},"end":{"line":68,"col":42}},{"start":{"line":70,"col":22},"end":{"line":70,"col":29}},{"start":{"line":75,"col":49},"end":{"line":75,"col":56}}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 70, characters 22-29:"}
{"sample_id":107,"reply":{"class":"return","value":[{"start":{"line":176,"col":6},"end":{"line":176,"col":17}},{"start":{"line":243,"col":53},"end":{"line":243,"col":64}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 243, characters 53-64:"}
{"sample_id":106,"reply":{"class":"return","value":[{"start":{"line":267,"col":27},"end":{"line":267,"col":44}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 267, characters 27-44:"}
{"sample_id":105,"reply":{"class":"return","value":[{"start":{"line":94,"col":27},"end":{"line":94,"col":46}},{"start":{"line":120,"col":33},"end":{"line":120,"col":52}},{"start":{"line":195,"col":41},"end":{"line":195,"col":44}},{"start":{"line":206,"col":8},"end":{"line":206,"col":11}},{"start":{"line":218,"col":8},"end":{"line":218,"col":11}},{"start":{"line":230,"col":8},"end":{"line":230,"col":11}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 94, characters 27-46:"}
{"sample_id":104,"reply":{"class":"return","value":[{"start":{"line":36,"col":12},"end":{"line":36,"col":20}},{"start":{"line":44,"col":17},"end":{"line":44,"col":25}},{"start":{"line":45,"col":13},"end":{"line":45,"col":21}},{"start":{"line":46,"col":9},"end":{"line":46,"col":17}},{"start":{"line":58,"col":10},"end":{"line":58,"col":18}},{"start":{"line":59,"col":13},"end":{"line":59,"col":21}}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 9-17:"}
{"sample_id":103,"reply":{"class":"return","value":[{"start":{"line":102,"col":13},"end":{"line":102,"col":28}},{"start":{"line":148,"col":24},"end":{"line":148,"col":39}},{"start":{"line":254,"col":19},"end":{"line":254,"col":34}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 148, characters 24-39:"}
{"sample_id":102,"reply":{"class":"return","value":[{"start":{"line":99,"col":46},"end":{"line":99,"col":56}},{"start":{"line":110,"col":17},"end":{"line":110,"col":27}},{"start":{"line":114,"col":30},"end":{"line":114,"col":40}},{"start":{"line":120,"col":22},"end":{"line":120,"col":32}},{"start":{"line":129,"col":34},"end":{"line":129,"col":44}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 120, characters 22-32:"}
{"sample_id":101,"reply":{"class":"return","value":[{"start":{"line":112,"col":11},"end":{"line":112,"col":29}},{"start":{"line":139,"col":11},"end":{"line":139,"col":29}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":1,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 139, characters 11-29:"}
{"sample_id":100,"reply":{"class":"return","value":[{"start":{"line":99,"col":58},"end":{"line":99,"col":68}},{"start":{"line":104,"col":70},"end":{"line":104,"col":80}},{"start":{"line":113,"col":27},"end":{"line":113,"col":37}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 104, characters 70-80:"}
{"sample_id":99,"reply":{"class":"return","value":[{"start":{"line":53,"col":12},"end":{"line":53,"col":33}},{"start":{"line":62,"col":14},"end":{"line":62,"col":35}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 53, characters 12-33:"}
{"sample_id":98,"reply":{"class":"return","value":[{"start":{"line":99,"col":4},"end":{"line":99,"col":12}},{"start":{"line":243,"col":12},"end":{"line":243,"col":20}}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 243, characters 12-20:"}
{"sample_id":97,"reply":{"class":"return","value":[{"start":{"line":193,"col":18},"end":{"line":193,"col":34}},{"start":{"line":201,"col":18},"end":{"line":201,"col":34}},{"start":{"line":201,"col":52},"end":{"line":201,"col":68}},{"start":{"line":214,"col":11},"end":{"line":214,"col":27}},{"start":{"line":226,"col":11},"end":{"line":226,"col":27}}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":3,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 214, characters 11-27:"}
{"sample_id":96,"reply":{"class":"return","value":[{"start":{"line":70,"col":6},"end":{"line":70,"col":8}},{"start":{"line":78,"col":44},"end":{"line":78,"col":45}},{"start":{"line":92,"col":4},"end":{"line":92,"col":6}},{"start":{"line":118,"col":10},"end":{"line":118,"col":12}},{"start":{"line":147,"col":49},"end":{"line":147,"col":50}},{"start":{"line":157,"col":6},"end":{"line":157,"col":8}},{"start":{"line":157,"col":16},"end":{"line":157,"col":17}},{"start":{"line":160,"col":4},"end":{"line":160,"col":6}},{"start":{"line":177,"col":17},"end":{"line":177,"col":19}},{"start":{"line":178,"col":12},"end":{"line":178,"col":14}},{"start":{"line":181,"col":32},"end":{"line":181,"col":33}},{"start":{"line":183,"col":18},"end":{"line":183,"col":20}},{"start":{"line":195,"col":77},"end":{"line":195,"col":78}},{"start":{"line":207,"col":64},"end":{"line":207,"col":65}},{"start":{"line":219,"col":40},"end":{"line":219,"col":41}},{"start":{"line":231,"col":39},"end":{"line":231,"col":40}},{"start":{"line":234,"col":57},"end":{"line":234,"col":58}},{"start":{"line":259,"col":67},"end":{"line":259,"col":69}},{"start":{"line":259,"col":71},"end":{"line":259,"col":73}},{"start":{"line":277,"col":17},"end":{"line":277,"col":18}}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 181, characters 19-33:"}
{"sample_id":95,"reply":{"class":"return","value":[{"start":{"line":2,"col":5},"end":{"line":2,"col":11}},{"start":{"line":2,"col":5},"end":{"line":2,"col":11}}],"notifications":[],"timing":{"clock":26,"cpu":26,"query":0,"pp":0,"reader":4,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 5-11:"}
{"sample_id":92,"reply":{"class":"return","value":[{"start":{"line":138,"col":50},"end":{"line":138,"col":67},"type":"int","tail":"no"},{"start":{"line":138,"col":50},"end":{"line":138,"col":67},"type":"int","tail":"no"},{"start":{"line":138,"col":49},"end":{"line":138,"col":72},"type":"int","tail":"no"},{"start":{"line":138,"col":8},"end":{"line":139,"col":30},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":137,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":116,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":112,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":108,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":107,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":106,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":103,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":101,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":100,"col":15},"end":{"line":139,"col":30},"type":"Fpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":100,"col":4},"end":{"line":139,"col":30},"type":"Data.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":69},"end":{"line":139,"col":30},"type":"Data.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":57},"end":{"line":139,"col":30},"type":"query_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":45},"end":{"line":139,"col":30},"type":"query_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":32},"end":{"line":139,"col":30},"type":"sample_size:int ->\nquery_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":13},"end":{"line":139,"col":30},"type":"sample_id_counter:int ->\nsample_size:int ->\nquery_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":1,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 138, characters 50-67:"}
{"sample_id":91,"reply":{"class":"return","value":[{"start":{"line":226,"col":33},"end":{"line":226,"col":41},"type":"location","tail":"no"},{"start":{"line":226,"col":33},"end":{"line":226,"col":41},"type":"location","tail":"no"},{"start":{"line":224,"col":8},"end":{"line":226,"col":51},"type":"label","tail":"no"},{"start":{"line":223,"col":23},"end":{"line":226,"col":51},"type":"label -> label","tail":"no"},{"start":{"line":223,"col":14},"end":{"line":226,"col":51},"type":"location -> label -> label","tail":"no"},{"start":{"line":223,"col":6},"end":{"line":232,"col":7},"type":"Data.Query_type.t","tail":"no"},{"start":{"line":222,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":210,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":197,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":188,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 226, characters 33-41:"}
{"sample_id":90,"reply":{"class":"return","value":[{"start":{"line":259,"col":67},"end":{"line":259,"col":69},"type":"Data.Timing.t list","tail":"no"},{"start":{"line":259,"col":63},"end":{"line":259,"col":78},"type":"int * Data.Timing.t list * Data.Query_info.t list * float","tail":"no"},{"start":{"line":259,"col":8},"end":{"line":259,"col":80},"type":"int * Data.Timing.t list * Data.Query_info.t list * float","tail":"no"},{"start":{"line":239,"col":8},"end":{"line":259,"col":80},"type":"int * Data.Timing.t list * Data.Query_info.t list * float","tail":"no"},{"start":{"line":238,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":236,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":1,"ppx":15,"typer":1,"error":0}},"loc":"File \"\", line 259, characters 67-69:"}
{"sample_id":89,"reply":{"class":"return","value":[{"start":{"line":46,"col":18},"end":{"line":46,"col":42},"type":"label","tail":"no"},{"start":{"line":46,"col":9},"end":{"line":46,"col":42},"type":"'a","tail":"no"},{"start":{"line":38,"col":17},"end":{"line":46,"col":42},"type":"[> `Assoc of (label * [> `Assoc of (label * [> `Int of 'a ]) list ]) list ] ->\n'a","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 38, characters 17-339:"}
{"sample_id":88,"reply":{"class":"return","value":[{"start":{"line":236,"col":8},"end":{"line":236,"col":17},"type":"extension:label -> label -> (Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":236,"col":8},"end":{"line":236,"col":17},"type":"extension:label -> label -> (Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":236,"col":8},"end":{"line":236,"col":38},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":236,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":24,"cpu":24,"query":1,"pp":0,"reader":3,"ppx":20,"typer":0,"error":0}},"loc":"File \"\", line 236, characters 8-17:"}
{"sample_id":87,"reply":{"class":"return","value":[{"start":{"line":46,"col":9},"end":{"line":46,"col":17},"type":"label -> 'a","tail":"no"},{"start":{"line":46,"col":9},"end":{"line":46,"col":17},"type":"label -> 'a","tail":"no"},{"start":{"line":46,"col":9},"end":{"line":46,"col":42},"type":"'a","tail":"no"},{"start":{"line":38,"col":17},"end":{"line":46,"col":42},"type":"[> `Assoc of (label * [> `Assoc of (label * [> `Int of 'a ]) list ]) list ] ->\n'a","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 9-17:"}
{"sample_id":86,"reply":{"class":"return","value":[{"start":{"line":226,"col":42},"end":{"line":226,"col":46},"type":"label","tail":"no"},{"start":{"line":226,"col":42},"end":{"line":226,"col":46},"type":"label","tail":"no"},{"start":{"line":224,"col":8},"end":{"line":226,"col":51},"type":"label","tail":"no"},{"start":{"line":223,"col":23},"end":{"line":226,"col":51},"type":"label -> label","tail":"no"},{"start":{"line":223,"col":14},"end":{"line":226,"col":51},"type":"location -> label -> label","tail":"no"},{"start":{"line":223,"col":6},"end":{"line":232,"col":7},"type":"Data.Query_type.t","tail":"no"},{"start":{"line":222,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":210,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":197,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":188,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 226, characters 42-46:"}
{"sample_id":85,"reply":{"class":"return","value":[{"start":{"line":270,"col":6},"end":{"line":270,"col":15},"type":"formatter:(Format.formatter -> 'a -> unit) ->\nfilename:label -> 'a list -> unit","tail":"no"},{"start":{"line":270,"col":6},"end":{"line":270,"col":15},"type":"formatter:(Format.formatter -> Data.Query_info.t -> unit) ->\nfilename:label -> Data.Query_info.t list -> unit","tail":"no"},{"start":{"line":270,"col":6},"end":{"line":272,"col":18},"type":"unit","tail":"no"},{"start":{"line":270,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":267,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":263,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":262,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":261,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":238,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":236,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 270, characters 6-15:"}
{"sample_id":84,"reply":{"class":"return","value":[{"start":{"line":73,"col":37},"end":{"line":73,"col":45},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":73,"col":37},"end":{"line":73,"col":45},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":73,"col":26},"end":{"line":73,"col":45},"type":"int","tail":"no"},{"start":{"line":73,"col":8},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":72,"col":8},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":69,"col":4},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":68,"col":47},"end":{"line":75,"col":71},"type":"'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":43},"end":{"line":75,"col":71},"type":"int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":35},"end":{"line":75,"col":71},"type":"int list -> int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":23},"end":{"line":75,"col":71},"type":"query_time:float -> int list -> int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":67,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":66,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":65,"col":32},"end":{"line":80,"col":49},"type":"label -> int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":65,"col":20},"end":{"line":80,"col":49},"type":"query_time:float -> label -> int list * int * Yojson.Basic.t * float","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":3,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 73, characters 26-45:"}
{"sample_id":83,"reply":{"class":"return","value":[{"start":{"line":156,"col":35},"end":{"line":156,"col":39},"type":"Fpath.t","tail":"no"},{"start":{"line":156,"col":35},"end":{"line":156,"col":39},"type":"Fpath.t","tail":"no"},{"start":{"line":156,"col":11},"end":{"line":156,"col":39},"type":"bool","tail":"no"},{"start":{"line":156,"col":8},"end":{"line":156,"col":65},"type":"Fpath.t list","tail":"no"},{"start":{"line":155,"col":16},"end":{"line":156,"col":65},"type":"Fpath.t list -> Fpath.t list","tail":"no"},{"start":{"line":155,"col":6},"end":{"line":156,"col":66},"type":"Fpath.t -> Fpath.t list -> Fpath.t list","tail":"no"},{"start":{"line":154,"col":4},"end":{"line":157,"col":17},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":153,"col":2},"end":{"line":166,"col":17},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":145,"col":2},"end":{"line":166,"col":17},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":144,"col":2},"end":{"line":166,"col":17},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":143,"col":2},"end":{"line":166,"col":17},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":141,"col":25},"end":{"line":166,"col":17},"type":"label -> (Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":141,"col":14},"end":{"line":166,"col":17},"type":"extension:label -> label -> (Fpath.t list, Rresult.R.msg) result","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":1,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 156, characters 35-39:"}
{"sample_id":82,"reply":{"class":"return","value":[{"start":{"line":70,"col":22},"end":{"line":70,"col":29},"type":"int list","tail":"no"},{"start":{"line":70,"col":22},"end":{"line":70,"col":29},"type":"int list","tail":"no"},{"start":{"line":70,"col":13},"end":{"line":70,"col":29},"type":"int list","tail":"no"},{"start":{"line":70,"col":12},"end":{"line":70,"col":35},"type":"int list * int","tail":"no"},{"start":{"line":69,"col":4},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":68,"col":47},"end":{"line":75,"col":71},"type":"'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":43},"end":{"line":75,"col":71},"type":"int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":35},"end":{"line":75,"col":71},"type":"int list -> int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":23},"end":{"line":75,"col":71},"type":"query_time:float -> int list -> int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":67,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":66,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":65,"col":32},"end":{"line":80,"col":49},"type":"label -> int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":65,"col":20},"end":{"line":80,"col":49},"type":"query_time:float -> label -> int list * int * Yojson.Basic.t * float","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":4,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 70, characters 22-29:"}
{"sample_id":81,"reply":{"class":"return","value":[{"start":{"line":19,"col":34},"end":{"line":19,"col":39},"type":"int","tail":"no"},{"start":{"line":19,"col":34},"end":{"line":19,"col":39},"type":"int","tail":"no"},{"start":{"line":19,"col":24},"end":{"line":19,"col":40},"type":"int","tail":"no"},{"start":{"line":19,"col":15},"end":{"line":19,"col":40},"type":"int","tail":"no"},{"start":{"line":19,"col":8},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":18,"col":8},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":17,"col":8},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":16,"col":6},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":20,"col":8},"type":"unit","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":21,"col":21},"type":"unit","tail":"no"},{"start":{"line":13,"col":4},"end":{"line":21,"col":21},"type":"unit","tail":"no"},{"start":{"line":12,"col":2},"end":{"line":22,"col":6},"type":"unit","tail":"no"},{"start":{"line":12,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":11,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":10,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":9,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":8,"col":24},"end":{"line":23,"col":7},"type":"label -> int array","tail":"no"}],"notifications":[],"timing":{"clock":27,"cpu":27,"query":0,"pp":0,"reader":4,"ppx":22,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 8-40:"}
{"sample_id":80,"reply":{"class":"return","value":[{"start":{"line":42,"col":16},"end":{"line":42,"col":26},"type":"'a -> ('a * 'b) list -> 'b","tail":"no"},{"start":{"line":42,"col":16},"end":{"line":42,"col":26},"type":"label -> (label * ([> `Int of 'b ] as 'a)) list -> 'a","tail":"no"},{"start":{"line":42,"col":16},"end":{"line":42,"col":41},"type":"[> `Int of 'a ]","tail":"no"},{"start":{"line":41,"col":25},"end":{"line":44,"col":51},"type":"'a","tail":"no"},{"start":{"line":39,"col":21},"end":{"line":45,"col":47},"type":"'a","tail":"no"},{"start":{"line":38,"col":17},"end":{"line":46,"col":42},"type":"[> `Assoc of (label * [> `Assoc of (label * [> `Int of 'a ]) list ]) list ] ->\n'a","tail":"no"}],"notifications":[],"timing":{"clock":25,"cpu":25,"query":1,"pp":0,"reader":2,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 42, characters 16-26:"}
{"sample_id":79,"reply":{"class":"return","value":[{"start":{"line":178,"col":32},"end":{"line":178,"col":34},"type":"label list ref -> label list -> unit","tail":"no"},{"start":{"line":178,"col":27},"end":{"line":178,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":15},"end":{"line":178,"col":48},"type":"Arg.anon_fun","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":178,"col":54},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":2,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 178, characters 32-34:"}
{"sample_id":78,"reply":{"class":"return","value":[{"start":{"line":16,"col":9},"end":{"line":16,"col":14},"type":"int","tail":"no"},{"start":{"line":16,"col":9},"end":{"line":16,"col":14},"type":"int","tail":"no"},{"start":{"line":16,"col":9},"end":{"line":16,"col":23},"type":"bool","tail":"no"},{"start":{"line":16,"col":6},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":20,"col":8},"type":"unit","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":21,"col":21},"type":"unit","tail":"no"},{"start":{"line":13,"col":4},"end":{"line":21,"col":21},"type":"unit","tail":"no"},{"start":{"line":12,"col":2},"end":{"line":22,"col":6},"type":"unit","tail":"no"},{"start":{"line":12,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":11,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":10,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":9,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":8,"col":24},"end":{"line":23,"col":7},"type":"label -> int array","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 9-14:"}
{"sample_id":77,"reply":{"class":"return","value":[{"start":{"line":33,"col":25},"end":{"line":33,"col":46},"type":"label","tail":"no"},{"start":{"line":33,"col":16},"end":{"line":33,"col":46},"type":"label","tail":"no"},{"start":{"line":33,"col":2},"end":{"line":36,"col":70},"type":"unit","tail":"no"},{"start":{"line":31,"col":16},"end":{"line":36,"col":70},"type":"label -> unit","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 33, characters 25-46:"}
{"sample_id":76,"reply":{"class":"return","value":[{"start":{"line":133,"col":56},"end":{"line":133,"col":68},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":133,"col":56},"end":{"line":133,"col":68},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":133,"col":27},"end":{"line":133,"col":75},"type":"Data.Query_info.t","tail":"no"},{"start":{"line":133,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":124,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":121,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":120,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":117,"col":8},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":64},"end":{"line":135,"col":34},"type":"(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":54},"end":{"line":135,"col":34},"type":"int ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":43},"end":{"line":135,"col":34},"type":"Data.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":31},"end":{"line":135,"col":34},"type":"Data.Timing.t list ->\nData.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":19},"end":{"line":135,"col":34},"type":"query_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":112,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":108,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":107,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":106,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":103,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":101,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":100,"col":15},"end":{"line":139,"col":30},"type":"Fpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":100,"col":4},"end":{"line":139,"col":30},"type":"Data.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":69},"end":{"line":139,"col":30},"type":"Data.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":57},"end":{"line":139,"col":30},"type":"query_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":45},"end":{"line":139,"col":30},"type":"query_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":32},"end":{"line":139,"col":30},"type":"sample_size:int ->\nquery_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":13},"end":{"line":139,"col":30},"type":"sample_id_counter:int ->\nsample_size:int ->\nquery_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":1,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 133, characters 56-68:"}
{"sample_id":75,"reply":{"class":"return","value":[{"start":{"line":147,"col":49},"end":{"line":147,"col":50},"type":"label list","tail":"no"},{"start":{"line":147,"col":41},"end":{"line":147,"col":50},"type":"label list","tail":"no"},{"start":{"line":147,"col":29},"end":{"line":147,"col":50},"type":"label list","tail":"no"},{"start":{"line":147,"col":6},"end":{"line":149,"col":49},"type":"bool","tail":"no"},{"start":{"line":146,"col":19},"end":{"line":149,"col":49},"type":"Fpath.t -> bool","tail":"no"},{"start":{"line":146,"col":4},"end":{"line":151,"col":43},"type":"[> `Sat of Fpath.t -> (bool, 'a) result ]","tail":"no"},{"start":{"line":145,"col":2},"end":{"line":166,"col":17},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":144,"col":2},"end":{"line":166,"col":17},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":143,"col":2},"end":{"line":166,"col":17},"type":"(Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":141,"col":25},"end":{"line":166,"col":17},"type":"label -> (Fpath.t list, Rresult.R.msg) result","tail":"no"},{"start":{"line":141,"col":14},"end":{"line":166,"col":17},"type":"extension:label -> label -> (Fpath.t list, Rresult.R.msg) result","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":1,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 147, characters 29-50:"}
{"sample_id":74,"reply":{"class":"return","value":[{"start":{"line":230,"col":8},"end":{"line":230,"col":11},"type":"location -> label -> label","tail":"no"},{"start":{"line":230,"col":8},"end":{"line":230,"col":11},"type":"location -> label -> label","tail":"no"},{"start":{"line":228,"col":6},"end":{"line":232,"col":7},"type":"Data.Query_type.t","tail":"no"},{"start":{"line":223,"col":6},"end":{"line":232,"col":7},"type":"Data.Query_type.t","tail":"no"},{"start":{"line":222,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":210,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":197,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":188,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 230, characters 8-11:"}
{"sample_id":73,"reply":{"class":"return","value":[{"start":{"line":19,"col":20},"end":{"line":19,"col":23},"type":"int -> int -> int","tail":"no"},{"start":{"line":19,"col":15},"end":{"line":19,"col":40},"type":"int","tail":"no"},{"start":{"line":19,"col":8},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":18,"col":8},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":17,"col":8},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":16,"col":6},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":19,"col":40},"type":"unit","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":20,"col":8},"type":"unit","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":21,"col":21},"type":"unit","tail":"no"},{"start":{"line":13,"col":4},"end":{"line":21,"col":21},"type":"unit","tail":"no"},{"start":{"line":12,"col":2},"end":{"line":22,"col":6},"type":"unit","tail":"no"},{"start":{"line":12,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":11,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":10,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":9,"col":2},"end":{"line":23,"col":7},"type":"int array","tail":"no"},{"start":{"line":8,"col":24},"end":{"line":23,"col":7},"type":"label -> int array","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 20-23:"}
{"sample_id":72,"reply":{"class":"return","value":[{"start":{"line":207,"col":18},"end":{"line":207,"col":39},"type":"Cursor_loc.corr_node","tail":"no"},{"start":{"line":207,"col":18},"end":{"line":207,"col":39},"type":"Cursor_loc.corr_node","tail":"no"},{"start":{"line":207,"col":16},"end":{"line":207,"col":65},"type":"Cursor_loc.corr_node list","tail":"no"},{"start":{"line":204,"col":6},"end":{"line":208,"col":7},"type":"Data.Query_type.t","tail":"no"},{"start":{"line":198,"col":6},"end":{"line":208,"col":7},"type":"Data.Query_type.t","tail":"no"},{"start":{"line":197,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":188,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":19,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 207, characters 18-39:"}
{"sample_id":71,"reply":{"class":"return","value":[{"start":{"line":263,"col":30},"end":{"line":263,"col":43},"type":"label","tail":"no"},{"start":{"line":263,"col":30},"end":{"line":263,"col":43},"type":"label","tail":"no"},{"start":{"line":263,"col":13},"end":{"line":263,"col":44},"type":"bool","tail":"no"},{"start":{"line":263,"col":9},"end":{"line":263,"col":44},"type":"bool","tail":"no"},{"start":{"line":263,"col":6},"end":{"line":266,"col":55},"type":"unit","tail":"no"},{"start":{"line":263,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":262,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":261,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":238,"col":6},"end":{"line":278,"col":8},"type":"unit","tail":"no"},{"start":{"line":236,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":1,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 263, characters 13-44:"}
{"sample_id":70,"reply":{"class":"return","value":[{"start":{"line":75,"col":34},"end":{"line":75,"col":45},"type":"int","tail":"no"},{"start":{"line":75,"col":34},"end":{"line":75,"col":45},"type":"int","tail":"no"},{"start":{"line":75,"col":33},"end":{"line":75,"col":57},"type":"int list","tail":"no"},{"start":{"line":75,"col":8},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":74,"col":8},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":73,"col":8},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":72,"col":8},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":69,"col":4},"end":{"line":75,"col":71},"type":"int list * int","tail":"no"},{"start":{"line":68,"col":47},"end":{"line":75,"col":71},"type":"'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":43},"end":{"line":75,"col":71},"type":"int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":35},"end":{"line":75,"col":71},"type":"int list -> int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":23},"end":{"line":75,"col":71},"type":"query_time:float -> int list -> int -> 'a list -> int list * int","tail":"no"},{"start":{"line":68,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":67,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":66,"col":2},"end":{"line":80,"col":49},"type":"int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":65,"col":32},"end":{"line":80,"col":49},"type":"label -> int list * int * Yojson.Basic.t * float","tail":"no"},{"start":{"line":65,"col":20},"end":{"line":80,"col":49},"type":"query_time:float -> label -> int list * int * Yojson.Basic.t * float","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":3,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 34-45:"}
{"sample_id":69,"reply":{"class":"return","value":[{"start":{"line":56,"col":11},"end":{"line":56,"col":15},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":56,"col":11},"end":{"line":56,"col":15},"type":"Yojson.Basic.t","tail":"no"},{"start":{"line":56,"col":10},"end":{"line":56,"col":36},"type":"Yojson.Basic.t * float","tail":"no"},{"start":{"line":55,"col":10},"end":{"line":56,"col":36},"type":"Yojson.Basic.t * float","tail":"no"},{"start":{"line":52,"col":12},"end":{"line":59,"col":51},"type":"Yojson.Basic.t * float","tail":"no"},{"start":{"line":51,"col":2},"end":{"line":63,"col":13},"type":"Yojson.Basic.t * float","tail":"no"},{"start":{"line":50,"col":2},"end":{"line":63,"col":13},"type":"Yojson.Basic.t * float","tail":"no"},{"start":{"line":49,"col":2},"end":{"line":63,"col":13},"type":"Yojson.Basic.t * float","tail":"no"},{"start":{"line":48,"col":22},"end":{"line":63,"col":13},"type":"label -> Yojson.Basic.t * float","tail":"no"},{"start":{"line":48,"col":10},"end":{"line":63,"col":13},"type":"query_time:float -> label -> Yojson.Basic.t * float","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 56, characters 11-15:"}
{"sample_id":68,"reply":{"class":"return","value":[{"start":{"line":177,"col":17},"end":{"line":177,"col":19},"type":"label list","tail":"no"},{"start":{"line":177,"col":13},"end":{"line":177,"col":19},"type":"label list ref","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":17,"cpu":16,"query":0,"pp":0,"reader":1,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 177, characters 17-19:"}
{"sample_id":67,"reply":{"class":"return","value":[{"start":{"line":135,"col":30},"end":{"line":135,"col":34},"type":"(location * 'a) list","tail":"no"},{"start":{"line":135,"col":30},"end":{"line":135,"col":34},"type":"(location * 'a) list","tail":"no"},{"start":{"line":134,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":133,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":124,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":121,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":120,"col":12},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":117,"col":8},"end":{"line":135,"col":34},"type":"Data.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":64},"end":{"line":135,"col":34},"type":"(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":54},"end":{"line":135,"col":34},"type":"int ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":43},"end":{"line":135,"col":34},"type":"Data.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":31},"end":{"line":135,"col":34},"type":"Data.Timing.t list ->\nData.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":19},"end":{"line":135,"col":34},"type":"query_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nint ->\n(location * 'a) list ->\nData.Timing.t list * Data.Query_info.t list * int * float","tail":"no"},{"start":{"line":116,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":112,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":108,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":107,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":106,"col":6},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":103,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":102,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":101,"col":2},"end":{"line":139,"col":30},"type":"(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":100,"col":15},"end":{"line":139,"col":30},"type":"Fpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":100,"col":4},"end":{"line":139,"col":30},"type":"Data.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":69},"end":{"line":139,"col":30},"type":"Data.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":57},"end":{"line":139,"col":30},"type":"query_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":45},"end":{"line":139,"col":30},"type":"query_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":32},"end":{"line":139,"col":30},"type":"sample_size:int ->\nquery_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"},{"start":{"line":99,"col":13},"end":{"line":139,"col":30},"type":"sample_id_counter:int ->\nsample_size:int ->\nquery_type:Data.Query_type.t ->\nquery_time:float ->\nData.Timing.t list ->\nData.Query_info.t list ->\nFpath.t ->\n(Data.Timing.t list * Data.Query_info.t list * int * float,\n Data.Timing.t list * Data.Query_info.t list * int * float)\nresult","tail":"no"}],"notifications":[],"timing":{"clock":19,"cpu":19,"query":2,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 133, characters 12-191:"}
{"sample_id":66,"reply":{"class":"return","value":[{"start":{"line":234,"col":57},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":234,"col":45},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":234,"col":29},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":234,"col":14},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":234,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":222,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":210,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":197,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":188,"col":4},"end":{"line":234,"col":58},"type":"Data.Query_type.t list","tail":"no"},{"start":{"line":186,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":179,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":178,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":177,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"},{"start":{"line":176,"col":2},"end":{"line":279,"col":47},"type":"unit","tail":"no"}],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 234, characters 45-58:"}
{"sample_id":65,"reply":{"class":"return","value":[{"start":{"line":96,"col":44},"end":{"line":96,"col":47},"type":"label","tail":"no"},{"start":{"line":96,"col":44},"end":{"line":96,"col":47},"type":"label","tail":"no"},{"start":{"line":96,"col":26},"end":{"line":96,"col":47},"type":"Yojson.Basic.t * float","tail":"no"},{"start":{"line":96,"col":6},"end":{"line":97,"col":35},"type":"((location * 'a) list * float, 'b * 'c * 'd * float) result","tail":"no"},{"start":{"line":94,"col":6},"end":{"line":97,"col":35},"type":"((location * 'a) list * float, 'b * 'c * 'd * float) result","tail":"no"},{"start":{"line":91,"col":24},"end":{"line":97,"col":35},"type":"(location * 'a) list ->\n((location * 'a) list * float, 'b * 'c * 'd * float) result","tail":"no"},{"start":{"line":91,"col":16},"end":{"line":97,"col":35},"type":"file:label ->\n(location * 'a) list ->\n((location * 'a) list * float, 'b * 'c * 'd * float) result","tail":"no"},{"start":{"line":91,"col":4},"end":{"line":97,"col":35},"type":"query_type:Data.Query_type.t ->\nfile:label ->\n(location * 'a) list ->\n((location * 'a) list * float, 'b * 'c * 'd * float) result","tail":"no"},{"start":{"line":90,"col":59},"end":{"line":97,"col":35},"type":"sample_id_counter:'a ->\nquery_type:Data.Query_type.t ->\nfile:label ->\n(location * 'b) list ->\n((location * 'b) list * float, 'c * 'd * 'a * float) result","tail":"no"},{"start":{"line":90,"col":47},"end":{"line":97,"col":35},"type":"query_data:'a ->\nsample_id_counter:'b ->\nquery_type:Data.Query_type.t ->\nfile:label ->\n(location * 'c) list ->\n((location * 'c) list * float, 'd * 'a * 'b * float) result","tail":"no"},{"start":{"line":90,"col":34},"end":{"line":97,"col":35},"type":"timing_data:'a ->\nquery_data:'b ->\nsample_id_counter:'c ->\nquery_type:Data.Query_type.t ->\nfile:label ->\n(location * 'd) list ->\n((location * 'd) list * float, 'a * 'b * 'c * float) result","tail":"no"},{"start":{"line":90,"col":22},"end":{"line":97,"col":35},"type":"query_time:float ->\ntiming_data:'a ->\nquery_data:'b ->\nsample_id_counter:'c ->\nquery_type:Data.Query_type.t ->\nfile:label ->\n(location * 'd) list ->\n((location * 'd) list * float, 'a * 'b * 'c * float) result","tail":"no"}],"notifications":[],"timing":{"clock":20,"cpu":20,"query":3,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 96, characters 44-47:"}
{"sample_id":64,"reply":{"class":"return","value":[{"start":{"line":6,"col":51},"end":{"line":6,"col":60},"type":"int","tail":"no"},{"start":{"line":6,"col":51},"end":{"line":6,"col":60},"type":"int","tail":"no"},{"start":{"line":6,"col":16},"end":{"line":6,"col":60},"type":"int","tail":"no"}],"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":2,"ppx":21,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 16-60:"}
{"sample_id":61,"reply":{"class":"return","value":[{"start":{"line":118,"col":16},"end":{"line":118,"col":64}},"(match (timing_data, query_data, sample_id, query_time) with\n| (_, _, _, _) -> _)"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":2,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 118, characters 16-64:"}
{"sample_id":60,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 190, characters 8-23:"}
{"sample_id":59,"reply":{"class":"return","value":[{"start":{"line":225,"col":72},"end":{"line":225,"col":78}},"(match merlin with | \"\" -> _ | _ -> _)"],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":3,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 225, characters 72-78:"}
{"sample_id":58,"reply":{"class":"return","value":[{"start":{"line":36,"col":21},"end":{"line":36,"col":70}},"(match \"merlin exited with code \" ^ (string_of_int code) with\n| \"\" -> _\n| _ -> _)"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":4,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 36, characters 21-70:"}
{"sample_id":57,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 266, characters 8-17:"}
{"sample_id":56,"reply":{"class":"error","value":"Destruct not allowed on non-immediate type","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":2,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 43, characters 17-21:"}
{"sample_id":55,"reply":{"class":"return","value":[{"start":{"line":191,"col":10},"end":{"line":192,"col":16}},"(match \"%s server locate -look-for ml -position '%a' -index 0 -filename %s < %s\"\nwith\n| \"\" -> _\n| _ -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 191, characters 10-96:"}
{"sample_id":54,"reply":{"class":"error","value":"Destruct not allowed on value_binding","notifications":[],"timing":{"clock":18,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 238, characters 49-59:"}
{"sample_id":53,"reply":{"class":"return","value":[{"start":{"line":68,"col":2},"end":{"line":80,"col":49}},"match let rec repeat_query ~query_time  timings max left_indices =\n        match left_indices with\n        | [] -> ((List.rev timings), max)\n        | _::tl ->\n            let (next_res, query_time) = query ~query_time cmd in\n            let next_timing = get_timing next_res in\n            let max_timing = Int.max max next_timing in\n            repeat_query ~query_time (next_timing :: timings) max_timing tl in\n      let (timings, max_timing) =\n        (repeat_query ~query_time [first_timing] first_timing)\n          (List.init 9 Fun.id) in\n      (timings, max_timing, first_result, query_time)\nwith\n| (_, _, _, _) -> _"],"notifications":[],"timing":{"clock":18,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 68, characters 2-544:"}
{"sample_id":52,"reply":{"class":"return","value":[{"start":{"line":135,"col":30},"end":{"line":135,"col":34}},"(match rest with | [] -> _ | _::_ -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":1,"ppx":15,"typer":1,"error":0}},"loc":"File \"\", line 135, characters 30-34:"}
{"sample_id":51,"reply":{"class":"return","value":[{"start":{"line":66,"col":33},"end":{"line":66,"col":54}},"match query ~query_time cmd with | (_, _) -> _"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 66, characters 33-54:"}
{"sample_id":50,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 18, characters 22-23:"}
{"sample_id":49,"reply":{"class":"return","value":[{"start":{"line":270,"col":6},"end":{"line":278,"col":8}},"(match Data.dump ~formatter:Data.Query_info.print\n        ~filename:(target_folder ^ \"/query_info.json\") query_data;\n      (let total_time = Sys.time () in\n       let metadata =\n         {\n           Data.Metadata.query_time = query_time;\n           Data.Metadata.total_time = total_time\n         } in\n       Data.dump ~formatter:Data.Metadata.print\n         ~filename:(target_folder ^ \"/metadata.json\") [metadata];\n       ())\nwith\n| () -> _)"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":4,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 270, characters 6-355:"}
{"sample_id":48,"reply":{"class":"return","value":[{"start":{"line":148,"col":6},"end":{"line":149,"col":49}},"match let folder_name = Fpath.to_string (Fpath.base path) in\n      not (List.mem folder_name excluded_folders)\nwith\n| false -> _\n| true -> _"],"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":4,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 148, characters 6-111:"}
{"sample_id":47,"reply":{"class":"return","value":[{"start":{"line":16,"col":6},"end":{"line":19,"col":40}},"match if index < length\n      then\n        let code = Char.code (str.[index]) in\n        let shift = j * char_size in int := ((!int) lor (code lsl shift))\nwith\n| () -> _"],"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 16, characters 6-150:"}
{"sample_id":46,"reply":{"class":"return","value":[{"start":{"line":249,"col":17},"end":{"line":249,"col":28}},"(match timing_data with | [] -> _ | _::_ -> _)"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 249, characters 17-28:"}
{"sample_id":45,"reply":{"class":"return","value":[{"start":{"line":110,"col":50},"end":{"line":110,"col":53}},"(match ast with | [] -> _ | _::_ -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 110, characters 50-53:"}
{"sample_id":44,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 266, characters 33-46:"}
{"sample_id":43,"reply":{"class":"return","value":[{"start":{"line":193,"col":35},"end":{"line":193,"col":38}},"(match End with | Cursor_loc.Start -> _ | Cursor_loc.End -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 193, characters 35-38:"}
{"sample_id":42,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 19, characters 12-14:"}
{"sample_id":41,"reply":{"class":"return","value":[{"start":{"line":178,"col":35},"end":{"line":178,"col":47}},"(match arg :: (!args) with | [] -> _ | _::_ -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 178, characters 35-47:"}
{"sample_id":40,"reply":{"class":"return","value":[{"start":{"line":249,"col":30},"end":{"line":249,"col":40}},"(match query_data with | [] -> _ | _::_ -> _)"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":1,"pp":0,"reader":1,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 249, characters 30-40:"}
{"sample_id":39,"reply":{"class":"error","value":"Destruct not allowed on arrow type","notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":4,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 70, characters 13-21:"}
{"sample_id":38,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: in_channel","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":4,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 53, characters 34-36:"}
{"sample_id":37,"reply":{"class":"return","value":[{"start":{"line":147,"col":29},"end":{"line":147,"col":50}},"match [\"_build\"; \"_opam\"] with | [] -> _ | _::_ -> _"],"notifications":[],"timing":{"clock":33,"cpu":33,"query":15,"pp":0,"reader":3,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 147, characters 29-50:"}
{"sample_id":36,"reply":{"class":"error","value":"Destruct not allowed on non-destructible type: t","notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":1,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 109, characters 53-58:"}
{"sample_id":35,"reply":{"class":"return","value":[{"start":{"line":198,"col":14},"end":{"line":198,"col":22}},"{ loc_start; loc_end; loc_ghost }"],"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":1,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 198, characters 14-22:"}
{"sample_id":34,"reply":{"class":"error","value":"Destruct not allowed on case","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 85, characters 23-53:"}
{"sample_id":33,"reply":{"class":"return","value":[{"start":{"line":6,"col":16},"end":{"line":6,"col":60}},"match (Sys.int_size + (char_size - 1)) / char_size with | 0 -> _ | _ -> _"],"notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 6, characters 16-60:"}
{"sample_id":30,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 259, characters 67-69:"}
{"sample_id":29,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 177, characters 17-19:"}
{"sample_id":28,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":265,"col":4}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":4,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 58, characters 49-62:"}
{"sample_id":27,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":73,"col":12}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":1,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 75, characters 34-45:"}
{"sample_id":26,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":94,"col":0}},"notifications":[],"timing":{"clock":21,"cpu":21,"query":0,"pp":0,"reader":3,"ppx":18,"typer":0,"error":0}},"loc":"File \"\", line 15, characters 21-22:"}
{"sample_id":25,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/int.ml","pos":{"line":40,"col":4}},"notifications":[],"timing":{"clock":22,"cpu":22,"query":1,"pp":0,"reader":3,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 85, characters 34-45:"}
{"sample_id":24,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":18,"cpu":18,"query":0,"pp":0,"reader":2,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 207, characters 41-65:"}
{"sample_id":23,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":73,"col":12}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":1,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 74, characters 37-48:"}
{"sample_id":22,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":19,"cpu":19,"query":2,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 134, characters 63-65:"}
{"sample_id":21,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":198,"col":10}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":4,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 206, characters 8-11:"}
{"sample_id":20,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":121,"col":37}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":4,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 133, characters 56-68:"}
{"sample_id":19,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":41,"col":15}},"notifications":[],"timing":{"clock":23,"cpu":23,"query":0,"pp":0,"reader":4,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 42, characters 35-41:"}
{"sample_id":18,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":67,"col":6}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":1,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 78, characters 31-43:"}
{"sample_id":17,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":6,"col":4}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 10, characters 42-51:"}
{"sample_id":16,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/lexing.ml","pos":{"line":162,"col":4}},"notifications":[],"timing":{"clock":17,"cpu":17,"query":1,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 29, characters 37-56:"}
{"sample_id":15,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":68,"col":35}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 70, characters 22-29:"}
{"sample_id":14,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":176,"col":6}},"notifications":[],"timing":{"clock":16,"cpu":16,"query":0,"pp":0,"reader":2,"ppx":14,"typer":0,"error":0}},"loc":"File \"\", line 243, characters 53-64:"}
{"sample_id":13,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.mli","pos":{"line":16,"col":2}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":5,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 267, characters 27-44:"}
{"sample_id":12,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/data.mli","pos":{"line":36,"col":2}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":1,"pp":0,"reader":4,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 94, characters 27-46:"}
{"sample_id":11,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml","pos":{"line":29,"col":4}},"notifications":[],"timing":{"clock":17,"cpu":17,"query":0,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 46, characters 9-17:"}
{"sample_id":10,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/fpath/fpath.mli","pos":{"line":347,"col":0}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":1,"pp":0,"reader":1,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 148, characters 24-39:"}
{"sample_id":9,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":99,"col":46}},"notifications":[],"timing":{"clock":18,"cpu":18,"query":2,"pp":0,"reader":1,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 120, characters 22-32:"}
{"sample_id":8,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":112,"col":11}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":1,"pp":0,"reader":1,"ppx":17,"typer":0,"error":0}},"loc":"File \"\", line 139, characters 11-29:"}
{"sample_id":7,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":99,"col":58}},"notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 104, characters 70-80:"}
{"sample_id":6,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/unix/unix.mli","pos":{"line":970,"col":0}},"notifications":[],"timing":{"clock":24,"cpu":24,"query":1,"pp":0,"reader":4,"ppx":19,"typer":0,"error":0}},"loc":"File \"\", line 53, characters 12-33:"}
{"sample_id":5,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/main.ml","pos":{"line":99,"col":4}},"notifications":[],"timing":{"clock":20,"cpu":20,"query":0,"pp":0,"reader":3,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 243, characters 12-20:"}
{"sample_id":4,"reply":{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/ocamlmerlin_tester/ocamlmerlin_tester/bin/cursor_loc.ml","pos":{"line":7,"col":4}},"notifications":[],"timing":{"clock":19,"cpu":18,"query":0,"pp":0,"reader":3,"ppx":15,"typer":0,"error":0}},"loc":"File \"\", line 214, characters 11-27:"}
{"sample_id":3,"reply":{"class":"return","value":"Not a valid identifier","notifications":[],"timing":{"clock":19,"cpu":19,"query":0,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 181, characters 19-33:"}
{"sample_id":2,"reply":{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/ppxlib.ml","pos":{"line":1,"col":0}},"notifications":[],"timing":{"clock":167,"cpu":146,"query":127,"pp":0,"reader":2,"ppx":16,"typer":0,"error":0}},"loc":"File \"\", line 2, characters 5-11:"}